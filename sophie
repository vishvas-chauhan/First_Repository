{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "210923_Normierung_ard_v1.ipynb",
      "private_outputs": true,
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vishvas-chauhan/First_Repository/blob/master/sophie\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TBEHhyDclhHQ"
      },
      "source": [
        "## 1 Setup\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PVr17XEgzvp"
      },
      "source": [
        "### Authentication"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-XvMcn38Dj3v"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HkwSd3Uel7jr"
      },
      "source": [
        "!pip install -U -q PyDrive\n",
        "!pip install -U -q gspread-pandas\n",
        "\n",
        "import pandas as pd\n",
        "import gspread\n",
        "\n",
        "from gspread_pandas import Spread, Client\n",
        "\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "\n",
        "import google.auth\n",
        "\n",
        "\n",
        "# Authenticate and create the PyDrive client.\n",
        "# This only needs to be done once in a notebook.\n",
        "auth.authenticate_user()\n",
        "gc = gspread.authorize(GoogleCredentials.get_application_default())\n",
        "\n",
        "credentials, project_id = google.auth.default()\n",
        "credentials"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rhupL0irg4rq"
      },
      "source": [
        "### Importing data to dataframe"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L-CADmC0kIcS"
      },
      "source": [
        "sheet_name = \"210923_Daten_Studien_v2\" #@param {type:\"string\"}\n",
        "\n",
        "worksheet = gc.open(sheet_name).sheet1 # input sheet\n",
        "\n",
        "# get_all_values gives a list of rows.\n",
        "data = worksheet.get_all_values()\n",
        "\n",
        "if len(data[0]) != 0:\n",
        "  print(\"Import: Success\")\n",
        "else:\n",
        "  print(\"Import: Failed\")\n",
        "\n",
        "# Declared Value Date for referencing\n",
        "  \n",
        "dates = [\"1950\",\"1955\",\"1960\",\"1965\",\"1970\",\"1975\",\"1980\",\"1985\",\"1990\",\"1991\",\"1992\",\"1993\",\"1994\",\"1995\",\"1996\",\"1997\",\"1998\",\"1999\",\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\",\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\",\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\",\"2059\",\"2060\"]\n",
        "print(\"Declared variable dates 1950-2060\")\n",
        "\n",
        "\n",
        "#create a rawDataframe\n",
        "\n",
        "\n",
        "headers = data[0]\n",
        "rdf = pd.DataFrame.from_records(data[1:], columns=headers)\n",
        "print(\"Dataframe rdf is set up.\\nReading head:\")\n",
        "\n",
        "#convertint years to numbers\n",
        "for year in dates:\n",
        "  rdf[str(year)] = pd.to_numeric(rdf[str(year)],errors='coerce')\n",
        "\n",
        "rdf.head(1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bhpxw5LT6KYz"
      },
      "source": [
        "### Transformation to Time-Series DataFrame\n",
        "\n",
        "Use gSheet to store the time-series output\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-kTx0gZblJp",
        "cellView": "code"
      },
      "source": [
        "#@title ## Convert to time-series format Dataframe\n",
        "#@markdown ## The Time Series lives in the variable \"df_time_series\"\n",
        "raw_output_time_series = \"raw_output\"\n",
        "\n",
        "list_output= []\n",
        "list_of_hashes = worksheet.get_all_records()\n",
        "  \n",
        "for row in list_of_hashes:\n",
        "  for d in dates:\n",
        "    a = []\n",
        "    a.append(d)\n",
        "    a.append(row[d])\n",
        "    a.append(row[\"ID\"])\n",
        "    a.append(row[\"Studie\"])\n",
        "    a.append(row[\"Dokument\"])\n",
        "    a.append(row[\"Themenfeld Studie\"])\n",
        "    a.append(row[\"Themenfeld erfasste Daten\"])\n",
        "    a.append(row[\"Tabelle\"])\n",
        "    a.append(row[\"Anmerkung\"])\n",
        "    a.append(row[\"Finale Auswahl\"])\n",
        "    a.append(row[\"Szenario\"])\n",
        "    a.append(row[\"Kategorie 1\"])\n",
        "    a.append(row[\"Kategorie 2\"])\n",
        "    a.append(row[\"Einheit\"])\n",
        "    a.append(row[\"ID_BVD\"])\n",
        "    a.append(row[\"BVD\"])\n",
        "    a.append(row[\"BVA\"])\n",
        "    a.append(row[\"BVN\"])\n",
        "    a.append(row[\"Norm-Kategorie\"])\n",
        "    a.append(row[\"Bearbeitung\"])\n",
        "    a.append(row[\"Inter-Extrapolation\"])\n",
        "    list_output.append(a)\n",
        "    \n",
        "# set up new Data-Frame\n",
        "df_time_series = pd.DataFrame(columns={\n",
        "    \"Date\",\n",
        "    \"value\",\n",
        "    \"ID\",\n",
        "    \"Studie\",\n",
        "    \"Dokument\",\n",
        "    \"Themenfeld Studie\",\n",
        "    \"Themenfeld erfasste Daten\",\n",
        "    \"Tabelle\",\n",
        "    \"Anmerkung\",\n",
        "    \"Finale Auswahl\",\n",
        "    \"Szenario\",\n",
        "    \"Kategorie 1\",\n",
        "    \"Kategorie 2\",\n",
        "    \"Einheit\",\n",
        "    \"ID_BVD\",\n",
        "    \"BVD\",\n",
        "    \"BVA\",\n",
        "    \"BVN\",\n",
        "    \"Norm-Kategorie\",\n",
        "    \"Bearbeitung\",\n",
        "    \"Inter-Extrapolation\"\n",
        "    })\n",
        "\n",
        "#update dataframe with converted list\n",
        "df_time_series  =pd.DataFrame(list_output,columns=[                                               \n",
        "    \"Date\",\n",
        "    \"value\",\n",
        "    \"ID\",\n",
        "    \"Studie\",\n",
        "    \"Dokument\",\n",
        "    \"Themenfeld Studie\",\n",
        "    \"Themenfeld erfasste Daten\",\n",
        "    \"Tabelle\",\n",
        "    \"Anmerkung\",\n",
        "    \"Finale Auswahl\",\n",
        "    \"Szenario\",\n",
        "    \"Kategorie 1\",\n",
        "    \"Kategorie 2\",\n",
        "    \"Einheit\",\n",
        "    \"ID_BVD\",\n",
        "    \"BVD\",\n",
        "    \"BVA\",\n",
        "    \"BVN\",\n",
        "    \"Norm-Kategorie\",\n",
        "    \"Bearbeitung\",\n",
        "    \"Inter-Extrapolation\"])\n",
        "\n",
        "df_time_series.head(1) #output for testing\n",
        "    \n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-6Pm_JzGHD3s"
      },
      "source": [
        "### Creating sample data frame with relevant data\n",
        "taks the **df_time_series** element and filters for studies that are \"in\" or \"out\"\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lA0RY7ngHDY2",
        "cellView": "code"
      },
      "source": [
        "#@title \n",
        "selection = \"in\" #@param [\"in\", \"out\"]\n",
        "sample_df = df_time_series[(df_time_series['Finale Auswahl'] == selection)]\n",
        "\n",
        "#Einschränkung für V3\n",
        "#selection_2 = 'HA-P|UK-1|BV-14|MO-4'\n",
        "#selection_st = [\"BV-14\"] #@param [\"in\", \"out\"]\n",
        "#sample_df = df_time_series[(df_time_series['Finale Auswahl'] == selection)& (df_time_series['Studie'].str.contains(selection_2))]\n",
        "\n",
        "sample_df.head(1) #output for testing\n",
        "#sample_df[sample_df['ID'] == 10979]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8f3VajdEquu1"
      },
      "source": [
        "#@title ### Run Code to initialise functions { display-mode: \"form\" }\n",
        "#@markdown Write functions in here\n",
        "\n",
        "#Interpolate Data on given Dataframe\n",
        "def interpolate_dataframe(df):\n",
        "  studien_ids= df.ID.unique()\n",
        "  print(\"Interpolating column value on Dataframe\")\n",
        "  print(\"Running interpolation for \", len(studien_ids),\" Rows\\nThis will take approx. \", len(studien_ids)/3.74/60,\" Minutes\" )\n",
        "  \n",
        "  for sid in studien_ids:\n",
        "    df.loc[df['ID'] == sid, 'value'] = df[df.ID == sid].value.interpolate(method='linear', limit_direction='forward', limit_area='inside')\n",
        "    \n",
        "  return df \n",
        "\n",
        "def convert_cell(value):\n",
        "  if isinstance(value, str):\n",
        "    return None\n",
        "  else:\n",
        "    return value\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1t-pqVdQikUY"
      },
      "source": [
        "## 2 Data cleansing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B3M-6h9uAKRO",
        "cellView": "form"
      },
      "source": [
        "#@title Conversion of values to float format\n",
        "sample_df['value'] = sample_df[\"value\"].apply(convert_cell)\n",
        "\n",
        "#sample_df.value = pd.to_numeric(sample_df.value, downcast='float')\n",
        "sample_df.value = pd.to_numeric(sample_df.value)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4az41lERZRfG",
        "cellView": "code"
      },
      "source": [
        "#@title Conversion of units\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000'), 'Bearbeitung'] = \"Einheit: Tsd zu Anzahl\"\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000'), 'value'] *= 1000\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000'), 'Einheit'] = \"Anzahl\"\n",
        "\n",
        "sample_df.loc[sample_df['Einheit'].eq('Mio.'), 'Bearbeitung'] = \"Einheit: Mio. zu Anzahl\"\n",
        "sample_df.loc[sample_df['Einheit'].eq('Mio.'), 'value'] *= 1000000\n",
        "sample_df.loc[sample_df['Einheit'].eq('Mio.'), 'Einheit'] = \"Anzahl\"\n",
        "\n",
        "sample_df.loc[sample_df['Einheit'].eq('Prozent'), 'Bearbeitung'] = \"Einheit: Prozent zu Prozentpunkt\"\n",
        "sample_df.loc[sample_df['Einheit'].eq('Prozent'), 'value'] *= 100\n",
        "sample_df.loc[sample_df['Einheit'].eq('Prozent'), 'Einheit'] = \"Prozentpunkt\"\n",
        "\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000 Euro'), 'Bearbeitung'] = \"Einheit: Tsd zu Anzahl\"\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000 Euro'), 'value'] *= 100\n",
        "sample_df.loc[sample_df['Einheit'].eq('in 1000 Euro'), 'Einheit'] = \"Euro\"\n",
        "\n",
        "\n",
        "sample_df.loc[sample_df['Bearbeitung'].str.contains('zu Anzahl')].head() #Einschränkung neu"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v89CL1DkPU2z",
        "cellView": "form"
      },
      "source": [
        "#@title Test of conversion of units\n",
        "sample_df['Bearbeitung'].unique()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WvTAabWfHD6Q"
      },
      "source": [
        "##3 Interpolate data\n",
        "input: sdf (sample dataframe)\n",
        "output: idf (interpolated dataframe)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VBDUI0AEHDjp",
        "cellView": "form"
      },
      "source": [
        "#@title Interpolation function\n",
        "df_interp = sample_df[(sample_df['Studie'] != 'BV-14')]\n",
        "\n",
        "isNullFirst = df_interp[\"value\"].isna().copy()\n",
        "\n",
        "df_interp = interpolate_dataframe(df_interp)\n",
        "\n",
        "isNullSecond =  df_interp[\"value\"].isna().copy()\n",
        "\n",
        "df_interp.loc[(isNullFirst==True) & (isNullSecond==False), 'Inter-Extrapolation']= \"inter\"\n",
        "\n",
        "sample_df[sample_df['Studie'] != 'BV-14'] = df_interp\n",
        "\n",
        "sample_df[(sample_df['Inter-Extrapolation'] == 'inter')].head()\n",
        " "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EKJ3Ia9NSTKP"
      },
      "source": [
        "##4 Support variables for standardization (Population assumptions)\n",
        "\n",
        "Create data set with Population data we need for our standardization to the 14. BVR"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2tEMHJUglgdy"
      },
      "source": [
        "#@title Chosing version V2/ V3 of BV-14 for standardization\n",
        "sds = \"P-1\" #@param {type:\"string\"}\n",
        "#Study we are standardizing to\n",
        "\n",
        "var = \"V2\" #@param {type:\"string\"}\n",
        "#version we are standardizing to\n",
        "\n",
        "sds_v = sds + \" \" + var\n",
        "#text snippet to indicate the study and version we are standardizing to\n",
        "\n",
        "sds_v_n = \"(normiert über \" + sds_v + \")\"\n",
        "#other version of that text snippet"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zdbY71TFTERV"
      },
      "source": [
        "#@title Data set with gathered Population assumptions\n",
        "#get all data that was indicated as Population base data in the column 'ID_BVD'\"\n",
        "df2 = sample_df[['ID_BVD', 'Kategorie 1', 'value', 'Date', 'Bearbeitung']]\n",
        "df_bva = df2[df2['ID_BVD'] != \"\"]\n",
        "#df_bva.head(1)\n",
        "df_bva[df_bva['ID_BVD'].str.contains('P-2_V2A') & df_bva['value'] > 0][:5]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "alr_vrsvWyB3"
      },
      "source": [
        "###Gerenate Values for Age-Groups\n",
        "\n",
        "Summing data for age groups needed for standardization of HA-2\n",
        "\n",
        "0-15, 0-20, 20-40, 40-60, 60-100 for data from BV-3 (2-A), BV-14 (V2), BV-14 (V3)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HBC0pRXeP-Qz"
      },
      "source": [
        "#@title Summing data for age groups needed for standardization of HA-2\n",
        "\n",
        "BASE = \"Population Germany by age group\"\n",
        "\n",
        "variable_list = ['P-2_V2A', 'P-1_V2', 'P-1_V3']\n",
        "#variable_list = ['BV-3_V2A']\n",
        "ranges = [[0,15], [0,20], [20,40], [40,60], [60,100]]\n",
        "\n",
        "subdates = dates[dates.index(\"2015\"):]\n",
        "\n",
        "q = sample_df.loc[(sample_df[\"Kategorie 1\"].str.strip()==BASE)]\n",
        "q[\"Kategorie 2\"] = pd.to_numeric(q[\"Kategorie 2\"], downcast='integer')\n",
        "\n",
        "sums_years = {}\n",
        "                   \n",
        "for variable in variable_list:\n",
        "  u = q.loc[q[\"BVD\"]==variable]\n",
        "  for date in subdates:\n",
        "    i = 0\n",
        "    for r in ranges:\n",
        "      group = str(r[0])+'-'+str(r[1])\n",
        "      n = variable + \"_\" + group\n",
        "      if n not in sums_years:\n",
        "        sums_years[n] = {}\n",
        "\n",
        "      s = u.loc[(u['Date']==date) & (u[\"Kategorie 2\"]>=r[0]) & (u[\"Kategorie 2\"]<=r[1]), 'value'].sum()\n",
        "      sums_years[n][date] = { 'sum': s, 'group': group }\n",
        "      i = i + 1\n",
        "\n",
        "print( sums_years['P-1_V2_0-15'])\n",
        "#next(iter(sums_years.values()))\n",
        "#print(sums_years)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4koUe78goij2"
      },
      "source": [
        "#@title Add data to dataframe for standardization\n",
        "BEARBEITUNG_WERT = \"Summiert über Original-Prognosedaten des stat BA\"\n",
        "\n",
        "#ds = []\n",
        "for i in sums_years:\n",
        "  for year in sums_years[i]:\n",
        "    category_1 = BASE + \" Altersgruppe: \" +  sums_years[i][year]['group']\n",
        "    d = {'ID_BVD': i, 'Kategorie 1': category_1, 'value': sums_years[i][year]['sum'], 'Date': year, 'Bearbeitung': BEARBEITUNG_WERT} \n",
        "    df_bva = df_bva.append(d, ignore_index=True)\n",
        "    #ds.append(d)\n",
        "    \n",
        "df_bva[df_bva['ID_BVD']=='P-1_V2_0-15'][:10]\n",
        "#df_bva\n",
        "#ds\n",
        "#print( sums_years[i][year]['sum'])\n",
        "#print(sums_years)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "902l7F6e6s7z",
        "cellView": "form"
      },
      "source": [
        "#@title Test for BV-3 (V2A) age group 0-15\n",
        "df_bva[(df_bva[\"ID_BVD\"]=='BV-3_V2A_0-15') & (df_bva[\"Date\"]=='2035')]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MOGH49HLPwh9"
      },
      "source": [
        "###Generate Additional Variables \n",
        "\n",
        "Additional variables are needed for standardization - i.e. Population in private households (for HA-2). "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uV8PCKEcAapT"
      },
      "source": [
        "#@title Import procedure data from google sheet\n",
        "#import procedure from google-doc\n",
        "worksheet = gc.open(sheet_name).worksheet(\"Zusätzliche Variablen für Normierung\") # input sheet\n",
        "\n",
        "# get_all_values gives a list of rows.\n",
        "data_procedures = worksheet.get_all_values()\n",
        "\n",
        "if len(data_procedures[0]) != 0:\n",
        "  print(\"Import: Success\")\n",
        "else:\n",
        "  print(\"Import: Failed\")\n",
        "  \n",
        "\n",
        "headers = data_procedures[0]\n",
        "\n",
        "df_nv = pd.DataFrame.from_records(data_procedures[1:], columns=headers)\n",
        "\n",
        "print(\"Dataframe df_nv is set up.\\nReading head:\")\n",
        "\n",
        "df_nv"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I_cIkNmdH4AV"
      },
      "source": [
        "### We extract the information we need from our procedure list "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1YIJQjfqIBx1",
        "cellView": "both"
      },
      "source": [
        "#normierung(werte) - from our procedure data we now which values we have to convert (\"Werte\" and \"Norm-Kategorie\")\n",
        "\n",
        "#the base of our new variable - i.e. \"HA-2_BV_Germany\" = German Population from study HA-2 \n",
        "#this is the data/ variable we are normalizing\n",
        "def base(row):\n",
        "  base = row['Variable'] + \"_\" + row['Norm-Kategorie']\n",
        "  return base\n",
        "\n",
        "#name of the new (normalized) variable we are creating\n",
        "def new_BVD(row):\n",
        "  new_BVD = row['ID_BVD'] + \"_\" + row['Norm-Kategorie']\n",
        "  return new_BVD\n",
        "\n",
        "#and its decription\n",
        "def cat_BVD(row):\n",
        "  cat_BVD = row['Kategorie 1']\n",
        "  return cat_BVD\n",
        "\n",
        "#indication of the Population assumption\n",
        "def BVA(row):\n",
        "  BVA = row['BVA'] + \"_\" + row['Norm-Kategorie'] \n",
        "  return BVA\n",
        "\n",
        "#indication of the Population data to standardize to\n",
        "#variation for the two variations of BV-14 included\n",
        "def BVN(row, var):\n",
        "  if row['BVN'] == \"P-1\":\n",
        "    BVN = row['BVN'] + \"_\" + var + \"_\" + row['Norm-Kategorie']\n",
        "  else: \n",
        "    BVN = row['BVN'] + \"_\" + row['Norm-Kategorie']\n",
        "  return BVN\n",
        "\n",
        "\n",
        "for pos, row in df_nv.iterrows():\n",
        "  print(\"Our new variable is \" + new_BVD(row) + \" - taking the values of \" + base(row) + \" using the Population assumption \" + BVA(row) + \" standardized to \" + BVN(row, var))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cSqef0XLH99c"
      },
      "source": [
        "### Extracting data we need for the new variable from our Population assumption table"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0km2zkCLRbT7"
      },
      "source": [
        "#standarization from 2019 on\n",
        "dates = [\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\",\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\",\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\",\"2059\",\"2060\"]\n",
        "\n",
        "#values that are being standardized (base variable)\n",
        "def base_values(row, date):\n",
        "  base_value = df_bva.loc[(df_bva['ID_BVD'] == base(row)) & (df_bva['Date'] == date),'value']\n",
        "  return base_value.item()\n",
        "\n",
        "#values of the Population assumption of the base variable\n",
        "def values_BVA(row, date):\n",
        "  value_BVA = df_bva.loc[(df_bva['ID_BVD'] == BVA(row)) & (df_bva['Date'] == date),'value']\n",
        "  return value_BVA.item()\n",
        "\n",
        "#description\n",
        "def cat_BVA(row, date):\n",
        "  cat_BVA = df_bva.loc[(df_bva['ID_BVD'] == BVA(row)) & (df_bva['Date'] == date),'Kategorie 1']\n",
        "  return cat_BVA.max()\n",
        "\n",
        "#values of the Population assumption we standardize to (normally BV-14)\n",
        "def values_BVN(row, date):\n",
        "  value_BVN = df_bva.loc[(df_bva['ID_BVD'] == BVN(row, var))& (df_bva['Date'] == date),'value']\n",
        "  return value_BVN.item()\n",
        "\n",
        "#description\n",
        "def cat_BVN(row, date):\n",
        "  cat_BVN = df_bva.loc[(df_bva['ID_BVD'] == BVN(row, var)) & (df_bva['Date'] == date),'Kategorie 1']\n",
        "  return cat_BVN.max()\n",
        "\n",
        "for pos, row in df_nv.iterrows():\n",
        "  for date  in dates: \n",
        "    if date == '2020':\n",
        "      if 'MO-4' in row['ID_BVD']:\n",
        "        if type(base_values(row, date)) == float:\n",
        "            print(row['ID_BVD'] + \" \" + row['Norm-Kategorie'])\n",
        "            print(\"Value of base variable is: \" + date + \" \" + str(base_values(row, date)))\n",
        "            print(\"Value of BVA variable is: \" + date + \" \" + str(values_BVA(row, date)) + \" \" + BVA(row))\n",
        "            print(\"Value of BVN variable is: \" + date + \" \" + str(values_BVN(row, date)) + \" \" + BVN(row, var))\n",
        "            break\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fRqk_2EO9l3h"
      },
      "source": [
        "#@title Functions to create new variable\n",
        "def calculate_value(row, date):\n",
        "    try:\n",
        "      \n",
        "      bv = base_values(row, date)\n",
        "      bva = values_BVA(row, date)\n",
        "      bvn = values_BVN(row, date)\n",
        "      \n",
        "      #calculation only if values are given (leaving out empty values)\n",
        "      if type(bv)==float and type(bva)==float and type(bvn)==float: \n",
        "          if bva > 0 and bvn > 0:\n",
        "            new_value = bv / bva * bvn\n",
        "            return new_value\n",
        "      return None\n",
        "    except:\n",
        "      #print(\"error\")\n",
        "      return None\n",
        "\n",
        "\n",
        "def create_new_variable(row, date):\n",
        "    new_value = calculate_value(row,date)\n",
        "    if new_value!=None:\n",
        "    #creating new row for the new variable\n",
        "      return {'ID_BVD' : new_BVD(row), 'value' : calculate_value(row, date), 'Kategorie 1' : cat_BVD(row), 'Date':  date,'Bearbeitung' : \" Normierung: Über \" + BVA(row) + \" (\" + cat_BVA(row, date) + \") auf \" + BVN(row, var) + \" (\" + cat_BVN(row, date) + \")\"} \n",
        "    return None"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "svhFJ_C-9m_k"
      },
      "source": [
        "#@title Calculating values and adding them to our dataframe of Population assumptions \n",
        "#loop to standardize data and append new rows to table of Population assumptions\n",
        "for pos, row in df_nv.iterrows():\n",
        "\n",
        "  for date in dates: \n",
        "    d = create_new_variable(row, date)\n",
        "    if d!=None:\n",
        "      df_bva = df_bva.append(d, ignore_index=True)\n",
        "\n",
        "df_bva[df_bva['ID_BVD'].str.contains(\"AM-9\")].head()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q32nX2nDqARw"
      },
      "source": [
        "##5 Standardization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_kPHe4DtJb5H"
      },
      "source": [
        "#@title Function for standardization\n",
        "\n",
        "dates = [\"1950\",\"1955\",\"1960\",\"1965\",\"1970\",\"1975\",\"1980\",\"1985\",\"1990\",\"1991\",\"1992\",\"1993\",\"1994\",\"1995\",\"1996\",\"1997\",\"1998\",\"1999\",\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\", \"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\",\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\",\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\",\"2059\",\"2060\"]\n",
        "\n",
        "normierung_df = sample_df[(sample_df[\"BVA\"]!=\"\") & (sample_df[\"BVN\"]!=\"\") ]\n",
        "\n",
        "def get_bvn_key(row):\n",
        "  global var\n",
        "  if row['BVN'] == \"P-1\":\n",
        "    bvn_key = row['BVN'] + \"_\" + var + \"_\" + row['Norm-Kategorie']\n",
        "  else: \n",
        "    bvn_key = row['BVN'] + \"_\" + row['Norm-Kategorie']\n",
        "  return bvn_key\n",
        "\n",
        "def get_bva_key(row):\n",
        "  bva_key = row['BVA'] + \"_\" + row['Norm-Kategorie'] \n",
        "  return bva_key\n",
        "\n",
        "def get_bva_value(key, df_bva_date_selected):\n",
        "  #& (df_bva['Date']==date)\n",
        "  value = df_bva_date_selected.loc[(df_bva_date_selected['ID_BVD']==key), 'value'].max()\n",
        "  return value\n",
        "  #return value\n",
        "  \n",
        "def get_category_one(key, df_bva_date_selected, date):\n",
        "  category = df_bva_date_selected.loc[(df_bva_date_selected['ID_BVD']==key), 'Kategorie 1'].max()\n",
        "  return category\n",
        "  \n",
        "def get_bearbeitung_before_value(bearbeitung_value):\n",
        "  if(type(bearbeitung_value)==str and bearbeitung_value!=\"\"):\n",
        "    return bearbeitung_value + \" | \"\n",
        "  return bearbeitung_value\n",
        "\n",
        "selected_dates = dates[dates.index('2019'):dates.index('2060')]\n",
        "print(selected_dates)\n",
        "\n",
        "dates_prior = dates[:dates.index('2019')]\n",
        "\n",
        "bva_value = None\n",
        "for date in selected_dates:\n",
        "  df_bva_date_selected = df_bva.loc[(df_bva['Date']==date)]\n",
        "  \n",
        "  year_df = normierung_df[(normierung_df['Date']==date) & (normierung_df['value'].notna())]\n",
        "  \n",
        "  bvn_key = year_df.apply(get_bvn_key, axis=1)\n",
        "  bva_key = year_df.apply(get_bva_key, axis=1)\n",
        "  \n",
        "  bva_value = bva_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "  bvn_value = bvn_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "  \n",
        "  bva_category_one = bva_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "  bvn_category_one = bvn_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "  \n",
        "  bearbeitung_before_value = year_df['Bearbeitung'].apply(get_bearbeitung_before_value)\n",
        "  condition = (sample_df[\"Einheit\"]!=\"Prozentpunkte\") & (sample_df[\"BVA\"]!=\"\") & (sample_df[\"BVN\"]!=\"\") & (sample_df[\"Date\"]==date) & (sample_df['value'].notna())\n",
        "  sample_df.loc[condition, 'value' ] = year_df['value'] / bva_value * bvn_value\n",
        "  sample_df.loc[condition, 'Bearbeitung' ] = bearbeitung_before_value + \"Normierung: Über \" + bva_key + \" (\" + bva_category_one + \") auf \" + bvn_key + \" (\" + bvn_category_one + \")\"\n",
        "\n",
        "  #bva_value = df_bva.loc[(df_bva['ID_BVD']==bvn_key) & (df_bva['Date']==date), 'value']\n",
        " \n",
        "sample_df[sample_df[\"Bearbeitung\"].str.contains(\"Normierung\", na=False)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tr9FxcD9qstl",
        "cellView": "code"
      },
      "source": [
        "#@title Function for percentage values\n",
        "#Normierung bei vorliegenden Prozentwerten\n",
        "\n",
        "normierung_condition = (sample_df[\"Einheit\"]==\"Prozentpunkte\") & (sample_df[\"BVA\"]!=\"\") & (sample_df[\"BVN\"]!=\"\")\n",
        "\n",
        "normierung_df = sample_df[normierung_condition]\n",
        "\n",
        "#Berechnung Werte vor 2019\n",
        "#percentage values before 2019 are calculated with the bva of the study\n",
        "\n",
        "for date in dates_prior:\n",
        "  df_bva_date_selected = df_bva.loc[(df_bva['Date']==date)]\n",
        "\n",
        "  year_df = normierung_df[(normierung_df['Date']==date)]\n",
        "\n",
        "  bvn_key = year_df.apply(get_bvn_key, axis=1)\n",
        "  bva_key = year_df.apply(get_bva_key, axis=1)\n",
        "\n",
        "  bva_value = bva_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "  bvn_value = bvn_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "\n",
        "  bva_category_one = bva_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "  bvn_category_one = bvn_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "\n",
        "  bearbeitung_before_value = year_df['Bearbeitung'].apply(get_bearbeitung_before_value)\n",
        "\n",
        "  year_df.loc[year_df['value'].notna(), 'value' ] = year_df['value'] / 100 * bva_value\n",
        "  year_df.loc[:, 'Einheit' ] = 'Anzahl'\n",
        "  year_df.loc[:, 'ID' ] = 100 * year_df['ID']\n",
        "  year_df.loc[year_df['value'].notna(), 'Bearbeitung' ] = bearbeitung_before_value + \"Prozentsatz hochgerechnet über Bevölkerungsannahme: \" + bva_key + \" - \" + bva_category_one\n",
        "  sample_df = sample_df.append(year_df, ignore_index=True)\n",
        "\n",
        "#Berechnung Werte nach 2019 (normiert)\n",
        "#percentage values after 2019 are calculated with the bvn of the study (normalized)\n",
        "\n",
        "for date in selected_dates:\n",
        "\n",
        "  df_bva_date_selected = df_bva.loc[(df_bva['Date']==date)]\n",
        "\n",
        "  year_df = normierung_df[(normierung_df['Date']==date)]\n",
        "\n",
        "  bvn_key = year_df.apply(get_bvn_key, axis=1)\n",
        "  bva_key = year_df.apply(get_bva_key, axis=1)\n",
        "\n",
        "  bva_value = bva_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "  bvn_value = bvn_key.apply(get_bva_value, args=(df_bva_date_selected,))\n",
        "\n",
        "  bva_category_one = bva_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "  bvn_category_one = bvn_key.apply(get_category_one, args=(df_bva_date_selected,date))\n",
        "\n",
        "  bearbeitung_before_value = year_df['Bearbeitung'].apply(get_bearbeitung_before_value)\n",
        "\n",
        "  #condition = normierung_condition & (sample_df[\"Date\"]==date) & (sample_df['value'].notna())\n",
        "\n",
        "  year_df.loc[year_df['value'].notna(),'value' ] = year_df['value'] / 100 * bvn_value\n",
        "  year_df.loc[:,'Einheit' ] = 'Anzahl'\n",
        "  year_df.loc[:, 'ID' ] = 100 * year_df['ID']\n",
        "  year_df.loc[year_df['value'].notna(),'Bearbeitung' ] = bearbeitung_before_value + \"Normierung: Prozentsatz hochgerechnet auf \" + bvn_key + \" - \" + bvn_category_one\n",
        "  sample_df = sample_df.append(year_df, ignore_index=True)\n",
        "#print( sample_df[\"Date\"] )\n",
        "\n",
        "sample_df[sample_df[\"Bearbeitung\"].str.contains(\"Prozentsatz hochgerechnet auf\") & sample_df[\"Date\"] == \"2010\"]\n",
        "%xmode Verbose\n",
        " "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yepwe0J4YNFt"
      },
      "source": [
        "sample_df[sample_df[\"Bearbeitung\"].str.contains(\"Prozentsatz hochgerechnet auf\") & sample_df[\"Date\"] == \"2010\"]\n",
        "#sample_df[(sample_df[\"ID\"] == 1379) & (sample_df['Date'] > '2009')]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YwZq8QwEgGch"
      },
      "source": [
        "##6 Extrapolation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9CqXlWx8IJ0X"
      },
      "source": [
        "### Extrapolate data\n",
        "input: sdf (sample dataframe)\n",
        "output: edf (extrapolated dataframe)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vvbDtHgTU_2i"
      },
      "source": [
        "subdates = dates[dates.index(\"2019\"):]\n",
        "\n",
        "sample_df = sample_df[sample_df['Date'].isin(subdates)].copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TvbuZKykcrXJ"
      },
      "source": [
        "min(sample_df['Date'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S7svbl7X_knV",
        "cellView": "code"
      },
      "source": [
        "#@title Extrapolation function: Over Average\n",
        "\n",
        "linear_extrapolation_studies = ['AM-3', 'H-2', 'WF-1', 'WF-3']\n",
        "average_extrapolation_stadies = ['AB-1', 'ED-15', 'AM-9', 'ED-13', 'MO-4', 'UK-10' ]\n",
        "\n",
        "#extrapolate linear\n",
        "linear_ex_df = sample_df[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041')]\n",
        "\n",
        "studien_ids= sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041'), \"ID\"].unique()\n",
        "print(\"Extrapolating column value on Dataframe\")\n",
        "print(\"Running extrapolation for \", len(studien_ids),\" Rows\\nThis will take approx. \", len(studien_ids)/3.74/60,\" Minutes\" )\n",
        "\n",
        "isNullFirst = sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041'), \"value\"].isna().copy()\n",
        "for sid in studien_ids:\n",
        "  sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041') & (sample_df['ID'] == sid), \"value\"] = sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041') & (sample_df['ID'] == sid), \"value\"].astype(float).interpolate(axis = 0, limit_area='outside', method='spline', order=1, limit_direction='forward')\n",
        "isNullSecond = sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041'), \"value\"].isna().copy()\n",
        "\n",
        "sample_df.loc[(sample_df[\"Studie\"].isin(linear_extrapolation_studies)) & (sample_df[\"Date\"]<'2041') & (isNullFirst==True) & (isNullSecond==False), 'Inter-Extrapolation'] = \"extra linear\"\n",
        "\n",
        "#exrapolate average\n",
        "\n",
        "studien_ids= sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041'), \"ID\"].unique()\n",
        "print(\"Extrapolating column value on Dataframe\")\n",
        "print(\"Running extrapolation for \", len(studien_ids),\" Rows\\nThis will take approx. \", len(studien_ids)/3.74/60,\" Minutes\" )\n",
        "\n",
        "isNullFirst = sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041'), \"value\"].isna().copy()\n",
        "for sid in studien_ids:\n",
        "  v = sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041') & (sample_df['ID'] == sid), \"value\"]\n",
        "  m = v.mean()\n",
        "  last_valid_index = v.last_valid_index()\n",
        "  if(last_valid_index!=None):\n",
        "    v.loc[last_valid_index+1:] = m\n",
        "    sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041') & (sample_df['ID'] == sid), \"value\"] = v\n",
        "    \n",
        "isNullSecond = sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041'), \"value\"].isna().copy()\n",
        "\n",
        "sample_df.loc[(sample_df[\"Studie\"].isin(average_extrapolation_stadies)) & (sample_df[\"Date\"]<'2041') & (isNullFirst==True) & (isNullSecond==False), 'Inter-Extrapolation'] = \"extra average\"\n",
        "\n",
        "sample_df.loc[(sample_df['Inter-Extrapolation']==\"extra average\")].head()\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A-JkUVZHaZGr"
      },
      "source": [
        "#@title Extrapolation function: Linear\n",
        "sample_df.loc[(sample_df['Inter-Extrapolation']==\"extra linear\")].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lsvRCRcuchYI"
      },
      "source": [
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "sample_df = sample_df[sample_df['Date'].isin(subdates)].copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_s2f3HTqc5H1"
      },
      "source": [
        "#max(sample_df['Date'])\n",
        "min(sample_df['Date'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m-Pcqx6QUdOy"
      },
      "source": [
        "sample_df[(sample_df['Date'] == '2000') & (sample_df['Studie'] == 'P-1')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S1BpZf9wM2kz"
      },
      "source": [
        "###Limiting values to a minimum of '0' for WF-1 (negative values not acceptable)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lgY8P5J1JoD0"
      },
      "source": [
        "s_df = sample_df.copy()\n",
        "\n",
        "\n",
        "s_df.loc[(s_df['Inter-Extrapolation'] == 'extra linear') & (s_df['Studie'] == 'WF-1') & (s_df['value'] < 0), 'value'] = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4zWE28VGK05i"
      },
      "source": [
        "min(s_df[(s_df['Inter-Extrapolation'] == 'extra linear') & (s_df['Studie'] == 'WF-1')].value)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FkGo2MqVNCCb"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uep_E4Q8NQwY"
      },
      "source": [
        "###Function to access before made data calculations in order to include those in the column \"Bearbeitung\"\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7aP45a5lpsHK"
      },
      "source": [
        "def bea_data(data):\n",
        "  if not data['Bearbeitung'].unique().size > 0:\n",
        "    return \"\"\n",
        "  else:\n",
        "    return \" (Bearbeitung - \" + str(data['Bearbeitung'].iloc[0]) + \" )\"\n",
        "  \n",
        "#ALTER CODE\n",
        "#def bea_data(data):\n",
        "  #if data['Bearbeitung'].iloc[0] == \"\":\n",
        "    #return \"\"\n",
        "  #else:\n",
        "    #return \" (Bearbeitung - \" + str(data['Bearbeitung'].iloc[0]) + \" )\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cdQqcpSa5tSi"
      },
      "source": [
        "###SUB VARIABLEN KALKULATION"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5hhB7k2Xr9a8"
      },
      "source": [
        "##BIP"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iJpodANSboqJ"
      },
      "source": [
        "###BIP pro Kopf für BLer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6OuYIpfPr9v6"
      },
      "source": [
        "studys = \"H-3|P-4|MO-4|UK-1\"\n",
        "\n",
        "n_df = pd.DataFrame.from_records([], columns=list(sample_df))\n",
        "\n",
        "s_df = sample_df[sample_df['Studie'].str.contains(studys)].copy()\n",
        "\n",
        "variable_name = \"GDP per Capita (for FS, Base-year = 2010)\"\n",
        "\n",
        "study_bip = \"H-3\"\n",
        "study_bv = \"P-4\"\n",
        "\n",
        "BASE = [\"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "var1 = \"Gross domestic product\"\n",
        "var2 = \"Bevölkerung nach Bundesland\"\n",
        "\n",
        "\n",
        "for b in BASE: \n",
        "  \n",
        "  for d in subdates:\n",
        "\n",
        "      data = s_df[(s_df['Studie'] == study_bip) & (s_df['Date'] == d) & (s_df['Kategorie 1'].str.contains(b)) & (s_df['Kategorie 2'] == var1)].copy()\n",
        "\n",
        "      data_base = s_df[(s_df['Studie'] == study_bv) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var2) & (s_df['Kategorie 2'] == b)]  \n",
        "\n",
        "      bea_data1 = bea_data(data)\n",
        "      bea_data2 = bea_data(data_base)\n",
        "\n",
        "      data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max() * 1000000000\n",
        "      data.loc[:,'Kategorie 1'] = variable_name\n",
        "      data.loc[:,'Kategorie 2'] = b\n",
        "      data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP - Verwendung in Volumen für BL (aus H-3_A)\" + bea_data1 +\" / Bevölkerung BL (aus P-4_A)\" + bea_data2\n",
        "      data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "      data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "      data.loc[:,'ID_BVD'] = \"\"\n",
        "      data.loc[:,'ID'] += 1330000\n",
        "      data.loc[:,'BVD'] = \"\"\n",
        "      data.loc[:,'BVA'] = \"\"\n",
        "      data.loc[:,'BVN'] = \"\"\n",
        "      data.loc[:,'Dokument'] = \"\"\n",
        "      data.loc[:, 'Einheit'] = 'Euro'\n",
        "   \n",
        "      \n",
        "      n_df = n_df.append(data, ignore_index=True)\n",
        "      \n",
        "print(n_df['Bearbeitung'][0])\n",
        "#bea_data(data_base)\n",
        "#bea_data(data)\n",
        "#data_base\n",
        "#print(data.loc[:,'Bearbeitung'])\n",
        "#print(data_base.loc[:,'Bearbeitung'])\n",
        "  \n",
        "#n_df[(n_df['Tabelle'] == 'New Variables') & (n_df['Studie'] == study_bip) & (n_df['Kategorie 1'] == variable_name)]  \n",
        "\n",
        " \n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-I4PA29jgDf_"
      },
      "source": [
        "n_df['Kategorie 2'].unique()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mMoS0dmDjqha"
      },
      "source": [
        "s_copy = sample_df.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xwH9T5eDbTck"
      },
      "source": [
        "sample_df = sample_df.append(n_df, ignore_index=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_HsITfHTbk9v"
      },
      "source": [
        "###BIP pro Kopf für DE"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cPTImscQEiAu"
      },
      "source": [
        "variable_name = \"GDP per Capita (for GE)\"\n",
        "\n",
        "study_bip = \"H-3\"\n",
        "study_bv = \"P-4\"\n",
        "\n",
        "study_h = \"H-3\"\n",
        "study_b = \"P-4\"\n",
        "\n",
        "  \n",
        "\n",
        "b1 = \"Spending by volume\"\n",
        "b2 = \"Gross domestic product\"\n",
        "var1 = \"Population Germany\"\n",
        "var2 = \"Population Overall\"\n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "  \n",
        "for d in subdates:\n",
        "\n",
        "      data = s_df[(s_df['Studie'] == study_bip) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == b1) & (s_df['Kategorie 2'] == b2)].copy()\n",
        "\n",
        "      data_base = s_df[(s_df['Studie'] == study_bv) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var1) & (s_df['Kategorie 2'] == var2)]  \n",
        "      \n",
        "      bea_data1 = bea_data(data)\n",
        "      bea_data2 = bea_data(data_base)\n",
        "\n",
        "\n",
        "      data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max() * 1000000000\n",
        "      data.loc[:,'Kategorie 1'] = variable_name\n",
        "      data.loc[:,'Kategorie 2'] = 'Germany'\n",
        "      data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP - Verwendung in Volumen aus H-3_B\" + bea_data1 + \"/ Bevölkerung DE aus P-4_C\" + bea_data2\n",
        "      data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "      data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "      data.loc[:,'ID_BVD'] = \"\"\n",
        "      data.loc[:,'ID'] += 1330000\n",
        "      data.loc[:,'BVD'] = \"\"\n",
        "      data.loc[:,'BVA'] = \"\"\n",
        "      data.loc[:,'BVN'] = \"\"\n",
        "      data.loc[:,'Dokument'] = \"\"\n",
        "      data.loc[:, 'Einheit'] = 'Euro'\n",
        "\n",
        "      s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 2'] == 'Germany') & (s_df['Kategorie 1'] == variable_name)].head()\n",
        " "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AESB9MkPcup0"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 2'] == 'Germany') & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209801] "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ojzs6IkRhHAl"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TVZZwM7Ruj5E"
      },
      "source": [
        "###Choosing timeframe for calculations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sUC3rwozsztJ"
      },
      "source": [
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W9xyHAtFbsJ7"
      },
      "source": [
        "###BIP für MO-4"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jylnBrs_y0OL"
      },
      "source": [
        "s = \"MO-4\"\n",
        "  \n",
        "s_df = sample_df.copy()\n",
        "\n",
        "variable_name = \"BIP pro Kopf (für DE)\"\n",
        "  \n",
        "\n",
        "b2 = \"BIP\"\n",
        "var1 = \"Zentrale Leitdaten: Einwohner Gesamt\"\n",
        "\n",
        "\n",
        "\n",
        "#s_df = sample_df.copy()\n",
        "\n",
        "  \n",
        "for d in subdates:\n",
        "\n",
        "      data = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 2'] == b2)].copy()\n",
        "\n",
        "      data_base = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var1)] \n",
        "\n",
        "\n",
        "      data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max() * 1000000000\n",
        "      data.loc[:,'Kategorie 1'] = variable_name\n",
        "      data.loc[:,'Kategorie 2'] = 'Germany'\n",
        "      data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP - Verwendung in Volumen (von Mrd. in Anzahl umgerechnet über * 1.000.000.000) / Bevölkerung DE (Umrechnung von Mio. zu Anzahl über * 1.000.000)\"\n",
        "      data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "      data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "      data.loc[:,'ID_BVD'] = \"\"\n",
        "      data.loc[:,'ID'] += 1330000\n",
        "      data.loc[:,'BVD'] = \"\"\n",
        "      data.loc[:,'BVA'] = \"\"\n",
        "      data.loc[:,'BVN'] = \"\"\n",
        "      data.loc[:, 'Einheit'] = 'Euro'\n",
        "      data.loc[:,'Dokument'] = \"\"\n",
        "\n",
        "\n",
        "      \n",
        "\n",
        "      s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == s) & (s_df['Kategorie 1'] == variable_name)]  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U6dO5NVfh-EE"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GPkVL1DNbx-F"
      },
      "source": [
        "###BIP pro Kopf für UK-1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zW7XxHZ4n_xL"
      },
      "source": [
        "s = \"UK-1\"\n",
        "\n",
        "  \n",
        "s_df = sample_df.copy()\n",
        "\n",
        "variable_name = \"BIP pro Kopf (für DE)\"\n",
        "  \n",
        "\n",
        "b2 = \"BIP\"\n",
        "var1 = \"Bevölkerung\"\n",
        "\n",
        "var2 = [\"2010\", \"2016\"]\n",
        "\n",
        "for v in var2: \n",
        "  \n",
        "  for d in subdates:\n",
        "\n",
        "        data = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 2'].str.contains(b2)) & (s_df['Einheit'].str.contains(v))].copy()\n",
        "        data_base = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 2'] == var1) ]  \n",
        "        \n",
        "        data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max() * 1000000000\n",
        "        data.loc[:,'Kategorie 1'] = variable_name\n",
        "        data.loc[:,'Kategorie 2'] = 'Germany'\n",
        "        data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP - Verwendung in Volumen (von Mrd. in Anzahl umgerechnet über * 1.000.000.000) / Bevölkerung DE (Umrechnung von Tsd. in Anzahl über * 1.000)\"\n",
        "        data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "        data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "        data.loc[:,'ID_BVD'] = \"\"\n",
        "        data.loc[:,'ID'] += 1330000\n",
        "        data.loc[:,'BVD'] = \"\"\n",
        "        data.loc[:,'BVA'] = \"\"\n",
        "        data.loc[data['Einheit'].str.contains(v),'Kategorie 1'] = variable_name + \" (\" + v + \")\"\n",
        "        data.loc[data['Einheit'].str.contains(v),'Kategorie 1'] = variable_name + \" (\" + v + \")\"\n",
        "        data.loc[:,'Einheit'] = \"Euro\"\n",
        "        data.loc[:,'BVN'] = \"\"\n",
        "        data.loc[:,'Dokument'] = \"\"\n",
        "\n",
        "\n",
        "        s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == s) & (s_df['Kategorie 1'].str.contains(\"2010|2016\"))& (s_df['value'] > 0) ]  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MI0nRGgcoEJt"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HH6fwQr-PyKj"
      },
      "source": [
        "##Additional calculations E&U"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7dhndZc4RaVL"
      },
      "source": [
        "###Average PKWs per household"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jtG60Z6sP2m6",
        "cellView": "code"
      },
      "source": [
        "#@title Calculation for ED-15\n",
        "variable_name = \"PKW-Bestand pro Haushalt\"\n",
        "study_pkw = \"ED-15\"\n",
        "study_hh = \"ED-15\"\n",
        "\n",
        "var_1 = \"PKW-Bestand Germany\" \n",
        "base = \"Referenzprognose 2005 – Private Haushalte Germany\"\n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_pkw) & (s_df['Date'] == d) & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_hh) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)]  \n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: PKW-Bestand ED-15\" + bea_data1 + \"/ Haushalte ED-15\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 220000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'PKWs'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7d_XB5hXRsvO"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B2ijifCIWKou",
        "cellView": "code"
      },
      "source": [
        "#@title Calculation for MO-4\n",
        "variable_name = \"PKW-Bestand pro Haushalt\"\n",
        "study_pkw = \"MO-4\"\n",
        "study_hh = \"MO-4\"\n",
        "\n",
        "var_1 = \"Pkw-Bestand\" \n",
        "base = \"Haushalte insgesamt\"\n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_pkw) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_hh) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)]  \n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: PKW-Bestand MO-4\" + bea_data1 + \"/ Haushalte MO-4\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 280000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'PKWs'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FHUumGYSX8u3"
      },
      "source": [
        "data_base"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1sQ6_Vr8WLD9"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-65Pk3WRb-i"
      },
      "source": [
        "###PKW saturation per 1000 inhabitants\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F1yGXj_3RU-G",
        "cellView": "code"
      },
      "source": [
        "#@title Calculation for ED-15\n",
        "variable_name = \"PKW-Dichte pro 1000 Einwohner\"\n",
        "study_pkw = \"ED-15\"\n",
        "study_bv = \"ED-15\"\n",
        "\n",
        "\n",
        "var_1 = \"PKW-Bestand Germany\"\n",
        "base = \"Referenzprognose 2005 – Bevölkerung Germany\" \n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_pkw) & (s_df['Date'] == d) & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_bv) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)]\n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / ( data_base.loc[:,'value'].max() / 1000 )\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: PKW-Bestand ED-15\" + bea_data1 + \"/ Bevölkerung DE P-1 Var. 2 geteilt durch 1000\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 230000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'PKWs'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name)].head()\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KdO1K6wZRu4Q"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "18vzhipFT4jx"
      },
      "source": [
        "###Average energy usage per household in PJ"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wbYvV4fiUbzu",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating total energy usage of private households\n",
        "variable_name = \"Endenergieverbrauch der deutschen Privathaushalte (in PJ)\"\n",
        "study = \"ED-15\"\n",
        "\n",
        "var_1 = \"Endenergieverbrauch in PJ\" \n",
        "var_2 = \"Endenergieverbrauch Private Haushalte Germany\"\n",
        "\n",
        "\n",
        "#Calculating amount of energy usage for households\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data_pp = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "    \n",
        "    data_energy = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d)  & (s_df['Kategorie 2'] == var_2)]\n",
        "    \n",
        "    bea_data1 = bea_data(data_pp)\n",
        "    bea_data2 = bea_data(data_energy)\n",
        "\n",
        "    \n",
        "    data_pp.loc[:,'value'] = (data_pp.loc[:,'value'].max() / 100) * data_energy.loc[:,'value'].max()\n",
        "    data_pp.loc[:,'Kategorie 1'] = variable_name\n",
        "    data_pp.loc[:,'Kategorie 2'] = variable_name\n",
        "    data_pp.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Anteil HH an Endenergieverbrauch aus ED-15\" + bea_data1 + \" * Endenergieverbrauch Gesamt Germany aus ED-15\" + bea_data2\n",
        "    data_pp.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_pp.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_pp.loc[:,'ID_BVD'] = \"\"\n",
        "    data_pp.loc[:,'ID'] += 250000\n",
        "    data_pp.loc[:,'BVD'] = \"\"\n",
        "    data_pp.loc[:,'BVA'] = \"\"\n",
        "    data_pp.loc[:,'BVN'] = \"\"\n",
        "    data_pp.loc[:,'Dokument'] = \"\"\n",
        "    data_pp.loc[:, 'Einheit'] = 'PJ'\n",
        "\n",
        "    s_df = s_df.append(data_pp, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-3Fd2aLOWTp2"
      },
      "source": [
        "\n",
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209512]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JBOSvY1IT5Bs",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating energy usage per household (in PJ)\n",
        "variable_name = \"Durchschnittlicher Endenergieverbrauch pro Haushalt (in PJ)\"\n",
        "study_pkw = \"ED-15\"\n",
        "study_hh = \"ED-15\"\n",
        "\n",
        "var_1 = \"Endenergieverbrauch der deutschen Privathaushalte (in PJ)\" \n",
        "base = \"Referenzprognose 2005 – Private Haushalte Germany\"\n",
        "\n",
        "\n",
        "#Calculating average enrgy usage per household in PJ\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_pkw) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_hh) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)] \n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Endenergieverbrauch Haushalte ED-15\" + bea_data1 + \"/ Privathaushalte ED-15\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 260000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'PJ'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "\n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DDcY-qfEV9Zo"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209529]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8PxjkpoQbza3"
      },
      "source": [
        "#@title Conversion to GJ\n",
        "variable_name = \"Durchschnittlicher Endenergieverbrauch pro Haushalt (in GJ)\"\n",
        "study = \"ED-15\"\n",
        "\n",
        "\n",
        "var_1 = \"Durchschnittlicher Endenergieverbrauch pro Haushalt (in PJ)\" \n",
        "\n",
        "\n",
        "#Calculating average enrgy usage per household in GJ\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1)].copy()\n",
        "\n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() * 1000000\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = data.loc[:,'Bearbeitung'] + \", Umrechnung von PJ in GJ über * 1.000.000\" \n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 270000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'GJ'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3LhfFAee7Te"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_pkw) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209546]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MuN1260dT5Y9"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XcKgQjkfgFej"
      },
      "source": [
        "###UK-1: Average emissions per household"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6THhbQrwgF5k",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating emissions per household\n",
        "variable_name = \"Treibhausgasemissionen pro Haushalt (in Mio. t CO2 äq)\"\n",
        "study_em = \"UK-1\"\n",
        "study_hh = \"UK-1\"\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "var_1 = \"Energiebedingte Emissionen\" \n",
        "var_2 = \"Private Haushalte \"\n",
        "base = \"Haushalte\"\n",
        "\n",
        "\n",
        "#Calculating average emissions per household\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_em) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1) & (s_df['Kategorie 2'] == var_2)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_hh) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)]  \n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Treibhausgasemissionen Private Haushalte UK-1\" + bea_data1 + \"/ Private Haushalte aus UK-1 Indikatoren 1.4 und 1.5\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 270000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'Mio. t CO2 äq'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_em) & (s_df['Kategorie 1'] == variable_name)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k-2RUWHkWVFU"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == \"UK-1\") & (s_df['Kategorie 1'] == \"Treibhausgasemissionen pro Haushalt (in Mio. t CO2 äq)\"), \"Bearbeitung\"][209524]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rf9P4vq-krPv"
      },
      "source": [
        "#@title Conversion to t CO2 äq\n",
        "variable_name = \"Treibhausgasemissionen pro Haushalt (in t CO2 äq)\"\n",
        "study = \"UK-1\"\n",
        "\n",
        "\n",
        "var_1 = \"Treibhausgasemissionen pro Haushalt (in Mio. t CO2 äq)\"\n",
        "\n",
        "\n",
        "#Calculating average enrgy usage per household in smaller unit\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1)].copy()\n",
        "    \n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() * 1000000\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Treibhausgasemissionen Private Haushalte UK-1 (Umrechnung von 'Mio. t CO2 äq' zu 't CO2 äq') / Private Haushalte aus UK-1 Indikatoren 1.4 und 1.5 (Bearbeitung - Einheit: Tsd zu Anzahl)\"\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 270000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 't CO2 äq'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntBHkHLLgGN4"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f80f7u4wl5iq"
      },
      "source": [
        "###Average energy usage per household (EEV)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "545xr7kkl59S",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating EEV per household (in PJ)\n",
        "variable_name = \"Endenergieverbrauch (EEV) pro Haushalt in PJ\"\n",
        "study_em = \"UK-1\"\n",
        "study_hh = \"UK-1\"\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "var_1 = \"Endenergieverbrauch (EEV) nach Sektoren\" \n",
        "var_2 = \"Haushalte \"\n",
        "base = \"Haushalte\"\n",
        "\n",
        "\n",
        "#Calculating average emissions per household\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study_em) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1) & (s_df['Kategorie 2'] == var_2)].copy()\n",
        "    \n",
        "    data_base = s_df[(s_df['Studie'] == study_hh) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == base)]  \n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Endenergieverbrauch EEV Haushalte UK-1\" + bea_data1 + \"/ Anzahl HH aus UK-1 Indikatoren 1.4 und 1.5\" + bea_data2\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 270000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'PJ'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_em) & (s_df['Kategorie 1'] == variable_name)].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QCTgQ0b_Zr6F"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study_em) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209512]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gt3pnTU1mpKl",
        "cellView": "code"
      },
      "source": [
        "#@title Conversion in GJ\n",
        "variable_name = \"Endenergieverbrauch (EEV) pro Haushalt in GJ\"\n",
        "study = \"UK-1\"\n",
        "\n",
        "\n",
        "var_1 = \"Endenergieverbrauch (EEV) pro Haushalt in PJ\"\n",
        "\n",
        "\n",
        "#Calculating average enrgy usage per household in smaller unit\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "    \n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == var_1)].copy()\n",
        "    \n",
        "    \n",
        "    data.loc[:,'value'] = data.loc[:,'value'].max() * 1000000\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Endenergieverbrauch EEV Haushalte UK-1 (Umrechnung PJ in GJ) / Anzahl HH aus UK-1 Indikatoren 1.4 und 1.5 (Bearbeitung - Einheit: Tsd zu Anzahl)\"\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 270000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'GJ'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nsAk9EKyl6XK"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "beDKZCua_-LK"
      },
      "source": [
        "##Additional calculations AM"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OCd29NebAC8H"
      },
      "source": [
        "###Arbeitsvolumen je Erwerbstätigen AM-2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0e-d3Rp2_uCv",
        "cellView": "code"
      },
      "source": [
        "#@title Volume per EWT\n",
        "variable_name = \"Arbeitsvolumen je Erwerbstätigen p.a. \"\n",
        "study = \"AM-2\"\n",
        "var_1 = \"Arbeitsvolumen\" \n",
        "base = \"Erwerbstätige\" \n",
        "scen = ['Wirtschaft 4.0', 'QuBe-Basisszenario']\n",
        "\n",
        "#Calculating percentage of households with 3 people or more related to total households in Germany\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "  for s in scen:\n",
        "\n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == base) & (s_df['Szenario'] == s)].copy()\n",
        "\n",
        "    data_base = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == var_1)& (s_df['Szenario'] == s)]\n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "    \n",
        "    data.loc[:,'value'] = data_base.loc[:,'value'].max() * 1000000000 / data.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Szenario'] = data.loc[:,'Szenario']\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Arbeitsvolumen aus AM-2 (Bearbeitung - Einheit: 'Mrd. h' zu 'h') durch Erwerbstätige aus AM-2 \" + bea_data1\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 80000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data_base.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'Anzahl'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name)].head()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oN37xl0saHpA"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209512]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3oq7c758NK4"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3DRut3_WMjnJ"
      },
      "source": [
        "###Arbeitsproduktivität for AM-2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rIVpqED7MhDD",
        "cellView": "code"
      },
      "source": [
        "#@title Productivity\n",
        "variable_name = \"Arbeitsproduktivität\" \n",
        "study = \"AM-2\" #@param {type:\"string\"}\n",
        "var_1 = \"BIP (preisbereinigt, Basis 2010)\" #@param {type:\"string\"}\n",
        "base = \"Erwerbstätige\" \n",
        "scen = ['Wirtschaft 4.0', 'QuBe-Basisszenario']\n",
        "\n",
        "#Calculating percentage of households with 3 people or more related to total households in Germany\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for d in subdates:\n",
        "  for s in scen:\n",
        "\n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == base)& (s_df['Szenario'] == s)].copy()\n",
        "\n",
        "    data_base = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == var_1)& (s_df['Szenario'] == s)]\n",
        "    \n",
        "    bea_data1 = bea_data(data)    \n",
        "    \n",
        "    data.loc[:,'value'] = data_base.loc[:,'value'].max() * 1000000000 / data.loc[:,'value'].max()\n",
        "    data.loc[:,'Kategorie 1'] = variable_name\n",
        "    data.loc[:,'Kategorie 2'] = variable_name\n",
        "    data.loc[:,'Szenario'] = data.loc[:,'Szenario']\n",
        "    data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP (Bearbeitung - Einheit: 'Mrd. Euro' zu 'Euro') / Erwerbstätige\" + bea_data1\n",
        "    data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data.loc[:,'ID_BVD'] = \"\"\n",
        "    data.loc[:,'ID'] += 81000\n",
        "    data.loc[:,'BVD'] = \"\"\n",
        "    data.loc[:,'BVA'] = \"\"\n",
        "    data_base.loc[:,'Dokument'] = \"\"\n",
        "    data.loc[:,'BVN'] = \"\"\n",
        "    data.loc[:, 'Einheit'] = 'Euro'\n",
        "\n",
        "    s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name)].head()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "USyDQkyebgIt"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == study) & (s_df['Kategorie 1'] == variable_name), \"Bearbeitung\"][209512]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2KUK6167dvgT"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UEK67VhA8ro3"
      },
      "source": [
        "###Calculation of Population without work (Erwerbslose) for different job groups"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gkz-vZHR8q2T",
        "cellView": "code"
      },
      "source": [
        "#@title Population without work (job groups)\n",
        "variable_name = \"Erwerbslose\"\n",
        "\n",
        "szenarien = [\"Wirtschaft 4.0\", \"QuBe-Basisszenario\", \"Elektromobilität\"]\n",
        "\n",
        "berufe = [\"00 Militär\", \"01 Land-, Forst-, Tierwirtschaft, Gartenbau\", \"02 Rohstoffgewinnung, Produktion, Fertigung\", \"03 Bau, Architektur, Vermessung, Gebäudetechn.\", \"04 Naturwissenschaft, Geografie, Informatik\", \"05 Verkehr, Logistik, Schutz und Sicherheit\", \"06 Kaufm. Dienstl., Handel, Vertrieb, Tourismus\", \"07 Unternehmensorga., Buchhalt., Recht, Verwalt.\", \"08 Gesundheit, Soziales, Lehre u. Erziehung\", \"09 Geisteswissenschaften, Kultur, Gestaltung\"]\n",
        "\n",
        "study = \"AM-2\" #@param {type:\"string\"}\n",
        "var_1 = \"Erwerbspersonen\" #@param {type:\"string\"}\n",
        "base = \"Erwerbstätige\" \n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for s in szenarien:\n",
        "  \n",
        "  for b in berufe: \n",
        "\n",
        "    for d in subdates:\n",
        "\n",
        "        data = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s)  & (s_df['Date'] == d) & (s_df['Kategorie 1'] == b)  & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "\n",
        "        data_base = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == b)  & (s_df['Kategorie 2'] == base)]\n",
        "\n",
        "        bea_data1 = bea_data(data)\n",
        "        \n",
        "        data.loc[:,'value'] = data.loc[:,'value'].max() - data_base.loc[:,'value'].max()\n",
        "        data.loc[:,'Kategorie 1'] = b\n",
        "        data.loc[:,'Kategorie 2'] = variable_name\n",
        "        data.loc[:,'Bearbeitung'] = \"Eigene Berechnung über jährliche Daten: Erwerbspersonen MINUS Erwerbstätige\" + bea_data1\n",
        "        data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "        data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "        data.loc[:,'ID_BVD'] = \"\"\n",
        "        data.loc[:,'ID'] += 101000\n",
        "        data.loc[:,'BVD'] = \"\"\n",
        "        data.loc[:,'BVA'] = \"\"\n",
        "        data.loc[:,'Dokument'] = \"\"\n",
        "        data.loc[:,'BVN'] = \"\"\n",
        "        data.loc[:, 'Einheit'] = 'Anzahl'\n",
        "\n",
        "        s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Kategorie 1'] == \"00 Militär\") & (s_df['Kategorie 2'] == \"Erwerbslose\")].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qLAVUx08cu1d"
      },
      "source": [
        "#s_df.loc[(s_df['Kategorie 1'] == \"00 Militär\") & (s_df['Kategorie 2'] == \"Erwerbslose\"), \"Bearbeitung\"][209512]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r671BoDB8rTF"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bFMVaBbeieC5"
      },
      "source": [
        "###AM-2: Calculation of total Population not working"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZYZiOgzkidYD",
        "cellView": "code"
      },
      "source": [
        "#@title Total Population not working\n",
        "variable_name = \"Erwerbslose\"\n",
        "\n",
        "szenarien = [\"Wirtschaft 4.0\", \"QuBe-Basisszenario\", \"Elektromobilität\"]\n",
        "\n",
        "i = \"Insgesamt\"\n",
        "\n",
        "study = \"AM-2\" #@param {type:\"string\"}\n",
        "var_1 = \"Erwerbspersonen\" #@param {type:\"string\"}\n",
        "base = \"Erwerbstätige\" \n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for s in szenarien:\n",
        "\n",
        "    for d in subdates:\n",
        "\n",
        "        data = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s)  & (s_df['Date'] == d) & (s_df['Kategorie 1'] == i)  & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "\n",
        "        data_base = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == i)  & (s_df['Kategorie 2'] == base)]\n",
        "        \n",
        "        bea_data1 = bea_data(data)\n",
        "\n",
        "        data.loc[:,'value'] = data.loc[:,'value'].max() - data_base.loc[:,'value'].max()\n",
        "        data.loc[:,'Kategorie 1'] = \"Insgesamt\"\n",
        "        data.loc[:,'Kategorie 2'] = variable_name\n",
        "        data.loc[:,'Bearbeitung'] = \"Eigene Berechnung über jährliche Daten: Erwerbspersonen MINUS Erwerbstätige \" + bea_data1\n",
        "        data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "        data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "        data.loc[:,'ID_BVD'] = \"\"\n",
        "        data.loc[:,'ID'] += 102000\n",
        "        data.loc[:,'BVD'] = \"\"\n",
        "        data.loc[:,'BVA'] = \"\"\n",
        "        data.loc[:,'Dokument'] = \"\"\n",
        "        data.loc[:,'BVN'] = \"\"\n",
        "        data.loc[:, 'Einheit'] = 'Anzahl'\n",
        "\n",
        "        s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Kategorie 2'] == \"Eigene Berechnung über jährliche Daten\")]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Q4wFrPPjehj"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7cwegIQGjaD_"
      },
      "source": [
        "###Erwerbslosenquote for AM-2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LU8qAivxkPz-",
        "cellView": "code"
      },
      "source": [
        "#@title Rate\n",
        "variable_name = \"Erwerbslosenquote\"\n",
        "\n",
        "szenarien = [\"Wirtschaft 4.0\", \"QuBe-Basisszenario\", \"Elektromobilität\"]\n",
        "\n",
        "i = \"Insgesamt\"\n",
        "\n",
        "study = \"AM-2\" #@param {type:\"string\"}\n",
        "var_1 = \"Erwerbslose\" #@param {type:\"string\"}\n",
        "base = \"Erwerbspersonen\" \n",
        "\n",
        "\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "for s in szenarien:\n",
        "\n",
        "    for d in subdates:\n",
        "\n",
        "        data = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s)  & (s_df['Date'] == d) & (s_df['Kategorie 1'] == i)  & (s_df['Kategorie 2'] == var_1)].copy()\n",
        "\n",
        "        data_base = s_df[(s_df['Studie'] == study) & (s_df['Szenario'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == i)  & (s_df['Kategorie 2'] == base)]\n",
        "        \n",
        "        bea_data1 = bea_data(data)\n",
        "        bea_data2 = bea_data(data_base)\n",
        "\n",
        "        data.loc[:,'value'] = data.loc[:,'value'].max() / data_base.loc[:,'value'].max() * 100\n",
        "        data.loc[:,'Kategorie 1'] = variable_name\n",
        "        data.loc[:,'Kategorie 2'] = \"Eigene Berechnung über jährliche Daten\"\n",
        "        data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Erwerbslose (Eigene Berechnung über jährliche Daten: Erwerbspersonen MINUS Erwerbstätige) / Erwerbspersonen, alle zur Berechnung herangezogenen Variablen\" + bea_data2\n",
        "        data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "        data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "        data.loc[:,'ID_BVD'] = \"\"\n",
        "        data.loc[:,'ID'] += 103000\n",
        "        data.loc[:,'BVD'] = \"\"\n",
        "        data.loc[:,'BVA'] = \"\"\n",
        "        data.loc[:,'Dokument'] = \"\"\n",
        "        data.loc[:,'BVN'] = \"\"\n",
        "        data.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "\n",
        "        s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Kategorie 1'] == \"Erwerbslosenquote\")].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tQcn_nA8W84L"
      },
      "source": [
        "#s_df.loc[(s_df['Kategorie 1'] == \"Erwerbslosenquote\"), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fw6Byp4Sk5Do"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sFuitfzWiKIV"
      },
      "source": [
        "###Erwerbsquoten 15-64 AM-P"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPu7CUNVhP8l",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating Erwerbsquoten for men and women\n",
        "study_e = \"AM-P\" #@param {type:\"string\"}\n",
        "study_b = \"P-4\" #@param {type:\"string\"}\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "#Calculating Erwerbsquoten for men and women\n",
        "\n",
        "size = '15-24|25-34|35-44|45-54|55-64'\n",
        "group = [\"Male\", \"Female\"]\n",
        "\n",
        "for g in group: \n",
        "  for d in subdates:\n",
        "\n",
        "    data_e = s_df[(s_df['Studie'] == study_e) & (s_df['Kategorie 1'].str.contains(\"Erwerbsbevölkerung\")) & (s_df['Kategorie 1'].str.contains(\"age group\")) & (s_df['Date'] == d) & (s_df['Kategorie 1'].str.contains(g)) & (s_df['Kategorie 2'].str.contains(size))].copy()\n",
        "    data_base = s_df[(s_df['Studie'] == study_b) & (s_df['Kategorie 1'].str.contains(\"Population\"))& (s_df['Kategorie 1'].str.contains(\"age group\")) & (s_df['Kategorie 1'].str.contains(g)) & (s_df['Kategorie 2'].str.contains(size)) & (s_df['Date'] == d) & (s_df['value'].notna())]\n",
        "\n",
        "    bea_data1 = bea_data(data_e)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "    \n",
        "    data_e.loc[:,'value'] = data_e.loc[:,'value'].sum() / data_base.loc[:,'value'].sum() * 100\n",
        "    \n",
        "    data_e.index = pd.RangeIndex(len(data_e.index)) \n",
        "    \n",
        "    data_e.loc[0,'Kategorie 1'] = 'Erwerbsquote ' + g + ' 15-64'\n",
        "    data_e.loc[0,'Kategorie 2'] = 'Erwerbsquote ' + g + ' 15-64'\n",
        "    data_e.loc[0,'Szenario'] = data_e.loc[0,'Szenario']\n",
        "    data_e.loc[0,'Bearbeitung'] = \"Eigene Berechnung: Erwerbspersonen 15-64\" + bea_data1 + \"/ Bevölkerung 15-64 \" + bea_data2\n",
        "    data_e.loc[0,'Tabelle'] = \"New Variables\"\n",
        "    data_e.loc[0,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_e.loc[0,'ID_BVD'] = \"\"\n",
        "    data_e.loc[0,'ID'] += 90000\n",
        "    data_e.loc[0,'BVD'] = \"\"\n",
        "    data_e.loc[0,'BVA'] = \"\"\n",
        "    data_e.loc[0,'BVN'] = \"\"\n",
        "    data_e.loc[0,'Dokument'] = \"\"\n",
        "    data_e.loc[0,'Einheit'] = 'Prozentpunkte'\n",
        "\n",
        "    s_df = s_df.append(data_e.loc[0], ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'].str.contains(\"Erwerbsquote Männer\"))].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s6OQ9WyeZIQq"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'].str.contains(\"Erwerbsquote Männer\")), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DmkooREzd5y4"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zsuq_eF91y-U",
        "cellView": "code"
      },
      "source": [
        "#@title Calculating Erwerbsquoten for Germany\n",
        "study_e = \"AM-P\" #@param {type:\"string\"}\n",
        "study_b = \"AM-P\" #@param {type:\"string\"}\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "#Calculating Erwerbsquoten for Germany\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "\n",
        "    data_e = s_df[(s_df['Studie'] == study_e) & (s_df['Kategorie 2'] == \"Erwerbsbevölkerung\") & (s_df['Date'] == d)].copy()\n",
        "    data_base = s_df[(s_df['Studie'] == study_b) & (s_df['Kategorie 2'] == \"15-64\") & (s_df['Date'] == d) & (s_df['value'].notna())]\n",
        "    \n",
        "    bea_data1 = bea_data(data_e)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "    \n",
        "    data_e.loc[:,'value'] = data_e.loc[:,'value'].sum() / data_base.loc[:,'value'].sum() * 100\n",
        "    \n",
        "    data_e.index = pd.RangeIndex(len(data_e.index)) \n",
        "    \n",
        "    data_e.loc[0,'Kategorie 1'] = 'Erwerbsquote Germany 15-64'\n",
        "    data_e.loc[0,'Kategorie 2'] = 'Erwerbsquote Germany 15-64'\n",
        "    data_e.loc[0,'Szenario'] = data_e.loc[0,'Szenario']\n",
        "    data_e.loc[0,'Bearbeitung'] = \"Eigene Berechnung: Erwerbspersonen DE (15-64)\" + bea_data1 + \" / Bevölkerung DE 15-64\" + bea_data2\n",
        "    data_e.loc[0,'Tabelle'] = \"New Variables\"\n",
        "    data_e.loc[0,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_e.loc[0,'ID_BVD'] = \"\"\n",
        "    data_e.loc[0,'ID'] += 100000\n",
        "    data_e.loc[0,'BVD'] = \"\"\n",
        "    data_e.loc[0,'BVA'] = \"\"\n",
        "    data_e.loc[0,'BVN'] = \"\"\n",
        "    data_base.loc[0,'Dokument'] = \"\"\n",
        "    data_e.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "\n",
        "    s_df = s_df.append(data_e.loc[0], ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'].str.contains(\"Erwerbsquote\"))& (s_df['Studie'] == 'AM-P')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CUnPkhgElWsN"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'].str.contains(\"Erwerbsquote\"))& (s_df['Studie'] == 'AM-P'), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "poBQGjQXd7An"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nQ73QAmv3jf0"
      },
      "source": [
        "###Arbeitsproduktivität Prognos-Studie"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0WNRm6qM3ij1",
        "cellView": "code"
      },
      "source": [
        "#@title Productivity\n",
        "study_e = \"H-3\" #@param {type:\"string\"}\n",
        "study_b = \"AM-P\" #@param {type:\"string\"}\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "#Calculating Arbeitsproduktivität \n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "\n",
        "    data_e = s_df[(s_df['Studie'] == study_e)& (s_df['Kategorie 1'] == \"Verwendung in Volumen\") & (s_df['Kategorie 2'] == \"Bruttoinlandsprodukt\") & (s_df['Date'] == d)]\n",
        "    data_base = s_df[(s_df['Studie'] == study_b) & (s_df['Kategorie 1'] == \"Erwerbstätige Gesamtwirtschaft\") & (s_df['Date'] == d) & (s_df['value'].notna())].copy()\n",
        "    \n",
        "    bea_data1 = bea_data(data_e)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "\n",
        "    data_base.loc[:,'value'] = data_e.loc[:,'value'].sum() * 1000000000 / data_base.loc[:,'value'].sum() \n",
        "    data_base.loc[:,'Kategorie 1'] = 'Arbeitsproduktivität'\n",
        "    data_base.loc[:,'Kategorie 2'] = 'Arbeitsproduktivität'\n",
        "    data_base.loc[:,'Szenario'] = data_base.loc[:,'Szenario']\n",
        "    data_base.loc[:,'Bearbeitung'] = \"Eigene Berechnung: BIP aus H-3_B (Wert von Mrd. Eur umgerechnet in Euro) / Erwerbstätige aus AM-P_A\" + bea_data2\n",
        "    data_base.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_base.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_base.loc[:,'ID_BVD'] = \"\"\n",
        "    data_base.loc[:,'ID'] += 110000\n",
        "    data_base.loc[:,'BVD'] = \"\"\n",
        "    data_base.loc[:,'BVA'] = \"\"\n",
        "    data_base.loc[:,'BVN'] = \"\"\n",
        "    data_base.loc[:,'Dokument'] = \"\"\n",
        "    data_base.loc[:, 'Einheit'] = 'Euro'\n",
        "\n",
        "    s_df = s_df.append(data_base, ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'] == \"Arbeitsproduktivität\") & (s_df['Studie'] == 'AM-P')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Xa6yGVPn5hx"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'] == \"Arbeitsproduktivität\") & (s_df['Studie'] == 'AM-P'), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k-twoQgzd8Qk"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Yh0zgv7AVN6"
      },
      "source": [
        "##Additional calculations HA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L1eYFvHpuvXG"
      },
      "source": [
        "###Growth rate private households"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5oaCsvUXAUks"
      },
      "source": [
        "s_df = sample_df.copy()\n",
        "\n",
        "studies = ['H-2', 'HA-2', 'H-3']\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "v = \"Private Households Germany Overall\"\n",
        "\n",
        "for s in studies:\n",
        "  data = s_df[(s_df['Kategorie 1'] == v) & (s_df['value'].notna()) & (s_df['Studie'] == s)].copy()\n",
        "  \n",
        "  bea_data1 = bea_data(data)\n",
        "  \n",
        "  data.loc[:,'value'] = data.loc[:,'value'].pct_change() * 100\n",
        "  data.loc[:,'Kategorie 1'] = 'Growth rate of households in % over the years'\n",
        "  data.loc[:,'Kategorie 2'] = 'Growth rate of households in % over the years'\n",
        "  data.loc[:,'Szenario'] = data.loc[:,'Szenario']\n",
        "  data.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Prozentuale Veränderung, Ursprüngliche Variable\" + bea_data1\n",
        "  data.loc[:,'Tabelle'] = \"New Variables\"\n",
        "  data.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "  data.loc[:,'ID_BVD'] = \"\"\n",
        "  data.loc[:,'ID'] += 50000\n",
        "  data.loc[:,'BVD'] = \"\"\n",
        "  data.loc[:,'Einheit'] = \"Prozentpunkte\"\n",
        "  data.loc[:,'BVA'] = \"\"\n",
        "  data.loc[:,'Dokument'] = \"\"\n",
        "  data.loc[:,'BVN'] = \"\"\n",
        "  data.loc[:,'Norm-Kategorie'] = \"\"\n",
        "  \n",
        "  s_df = s_df.append(data, ignore_index=True)\n",
        "  \n",
        "\n",
        "\n",
        "s_df[s_df['Kategorie 1'] == \"Growth rate of households in % over the years\"].head()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sylcoh-BqmeU"
      },
      "source": [
        "#s_df.loc[(s_df['Kategorie 1'] == \"Growth rate of households in % over the years\"), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KkiIKTQGTeTD"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zz_Fh9FoirBd"
      },
      "source": [
        "###Private households with more than 3 people"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XFmbve1Bkat-"
      },
      "source": [
        "s_df = sample_df.copy()\n",
        "\n",
        "#Calculating number of households with 3 people or more\n",
        "\n",
        "studies = [\"HA-2\", \"H-3\", \"H-2\"]\n",
        "\n",
        "size = 'Dreipersonenhaushalt|Vierpersonenhaushalt|Haushalt mit fünf und mehr Personen'\n",
        "\n",
        "\n",
        "for s in studies: \n",
        "  for d in subdates:\n",
        "\n",
        "    data = s_df[(s_df['Studie'] == s) & (s_df['Kategorie 1'].str.contains(\"Private Households Germany by Household Size\")) & (s_df['Date'] == d) & (s_df['Kategorie 2'].str.contains(size)) & (s_df['Einheit'] == 'Anzahl')]\n",
        "    data_p3 = s_df[(s_df['Studie'] == s) & (s_df['Kategorie 1'].str.contains(\"Private Households Germany by Household Size\")) & (s_df['Kategorie 2'] == \"Haushalt mit fünf und mehr Personen \")& (s_df['Date'] == d) & (s_df['value'].notna()) & (s_df['Einheit'] == 'Anzahl')].copy()\n",
        "\n",
        "    bea_data1 = bea_data(data)\n",
        "    \n",
        "    data_p3.loc[:,'value'] = data.loc[:,'value'].sum()\n",
        "    data_p3.loc[:,'Kategorie 1'] = 'Haushalt mit drei Personen und mehr'\n",
        "    data_p3.loc[:,'Kategorie 2'] = 'Haushaltsanzahl'\n",
        "    data_p3.loc[:,'Szenario'] = data_p3.loc[:,'Szenario']\n",
        "    data_p3.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Summe von Dreipersonen-, Vierpersonen- und Fünf+ Personenhaushalte\" + bea_data1\n",
        "    data_p3.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_p3.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_p3.loc[:,'ID_BVD'] = \"\"\n",
        "    data_p3.loc[:,'ID'] += 130000\n",
        "    data_p3.loc[:,'BVD'] = \"\"\n",
        "    data_p3.loc[:,'BVA'] = \"\"\n",
        "    data_p3.loc[:,'Dokument'] = \"\"\n",
        "    data_p3.loc[:,'BVN'] = \"\"\n",
        "    data_p3.loc[:, 'Einheit'] = 'Anzahl'\n",
        "\n",
        "    s_df = s_df.append(data_p3, ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Studie'] == 'HA-2') & (s_df['Tabelle'] == 'New Variables')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6we4KKrVslcm"
      },
      "source": [
        "#s_df.loc[(s_df['Studie'] == 'HA-2') & (s_df['Tabelle'] == 'New Variables'), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CbZ6X7t_vdKM"
      },
      "source": [
        "#Calculating percentage of households with 3 people or more related to total households in Germany\n",
        "\n",
        "for s in studies:\n",
        "  for d in subdates:\n",
        "\n",
        "    data_hde = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == \"Privathaushalte Germany Total\")].copy()\n",
        "\n",
        "    data_p3 = s_df[(s_df['Studie'] == s) & (s_df['Date'] == d)  & (s_df['Kategorie 1'] == 'Haushalt mit drei Personen und mehr') & (s_df['Tabelle'] == 'New Variables')]\n",
        "    \n",
        "    \n",
        "    data_hde.loc[:,'value'] = data_p3.loc[:,'value'].max() / data_hde.loc[:,'value'].max() * 100\n",
        "    data_hde.loc[:,'Kategorie 1'] = 'Haushalt mit drei Personen und mehr'\n",
        "    data_hde.loc[:,'Kategorie 2'] = 'Anteil an Haushalten in Germany'\n",
        "    data_hde.loc[:,'Szenario'] = data_hde.loc[:,'Szenario']\n",
        "    data_hde.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Anteil 3P+ Haushalte an Haushalten insgesamt - über normierte Variablen berechnet \" + sds_v_n\n",
        "    data_hde.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_hde.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_hde.loc[:,'ID_BVD'] = \"\"\n",
        "    data_hde.loc[:,'ID'] += 140000\n",
        "    data_hde.loc[:,'BVD'] = \"\"\n",
        "    data_hde.loc[:,'BVA'] = \"\"\n",
        "    data_hde.loc[:,'Dokument'] = \"\"\n",
        "    data_hde.loc[:,'BVN'] = \"\"\n",
        "    data_hde.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "\n",
        "    s_df = s_df.append(data_hde, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == 'H-2') & (s_df['Kategorie 1'] == 'Haushalt mit drei Personen und mehr') & (s_df['Einheit'] == 'Prozentpunkte')]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F-SSR959eC6K"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FkFlO9grFPhD"
      },
      "source": [
        "###Average household size HA-2 and HA-3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IdDlA8IIFOwH",
        "cellView": "code"
      },
      "source": [
        "#@title Average household size \n",
        "study = \"HA-2\" #@param {type:\"string\"}\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "\n",
        "    data_e = s_df[(s_df['Studie'] == study)& (s_df['Kategorie 1'] == \"Population in Private Households Total\") & (s_df['Kategorie 2'] == \"Private Households Total\") & (s_df['Date'] == d)]\n",
        "    data_base = s_df[(s_df['Studie'] == study) & (s_df['Kategorie 1'] == \"Private Households Germany Overall\") & (s_df['Date'] == d) & (s_df['value'].notna())].copy()\n",
        "    \n",
        "    bea_data1 = bea_data(data_e)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "    \n",
        "    data_base.loc[:,'value'] = data_e.loc[:,'value'].max() / data_base.loc[:,'value'].max()    \n",
        "    data_base.loc[:,'Kategorie 1'] = 'Average Household size'\n",
        "    data_base.loc[:,'Kategorie 2'] = 'Average Household size'    \n",
        "    data_base.loc[:,'Szenario'] = data_base.loc[:,'Szenario']    \n",
        "    data_base.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Bevölkerung in Privathaushalten / Anzahl Privathaushalte, beide Variablen\" + bea_data2   \n",
        "    data_base.loc[:,'Tabelle'] = \"New Variables\"   \n",
        "    data_base.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_base.loc[:,'ID_BVD'] = \"\"\n",
        "    data_base.loc[:,'ID'] += 180000\n",
        "    data_base.loc[:,'BVD'] = \"\"\n",
        "    data_base.loc[:,'BVA'] = \"\"\n",
        "    data_base.loc[:,'BVN'] = \"\"\n",
        "    data_base.loc[:,'Dokument'] = \"\"\n",
        "    data_base.loc[:, 'Einheit'] = 'Personen'\n",
        "\n",
        "    s_df = s_df.append(data_base, ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'] == 'Durchschnittliche Haushaltsgröße') & (s_df['Studie'] == 'HA-2')].head()\n",
        "\n",
        "##### HA-3\n",
        "study = \"H-1\" #@param {type:\"string\"}\n",
        "s_df = sample_df.copy()\n",
        "\n",
        "\n",
        "for d in subdates:\n",
        "\n",
        "    data_e = s_df[(s_df['Studie'] == study)& (s_df['Kategorie 1'] == \"Population in Private Households Total\") & (s_df['Kategorie 2'] == \"Private Households Total\") & (s_df['Date'] == d)]\n",
        "    data_base = s_df[(s_df['Studie'] == study) & (s_df['Kategorie 1'] == \"Private Households Germany Overall\") & (s_df['Date'] == d) & (s_df['value'].notna())].copy()\n",
        "    \n",
        "    bea_data1 = bea_data(data_e)\n",
        "    bea_data2 = bea_data(data_base)\n",
        "    \n",
        "    data_base.loc[:,'value'] = data_e.loc[:,'value'].max() / data_base.loc[:,'value'].max()    \n",
        "    data_base.loc[:,'Kategorie 1'] = 'Average Household size'\n",
        "    data_base.loc[:,'Kategorie 2'] = 'Average Household size'    \n",
        "    data_base.loc[:,'Szenario'] = data_base.loc[:,'Szenario']    \n",
        "    data_base.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Bevölkerung in Privathaushalten / Anzahl Privathaushalte, beide Variablen\" + bea_data2   \n",
        "    data_base.loc[:,'Tabelle'] = \"New Variables\"   \n",
        "    data_base.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_base.loc[:,'ID_BVD'] = \"\"\n",
        "    data_base.loc[:,'ID'] += 180000\n",
        "    data_base.loc[:,'BVD'] = \"\"\n",
        "    data_base.loc[:,'BVA'] = \"\"\n",
        "    data_base.loc[:,'BVN'] = \"\"\n",
        "    data_base.loc[:,'Dokument'] = \"\"\n",
        "    data_base.loc[:, 'Einheit'] = 'Personen'\n",
        "\n",
        "    s_df = s_df.append(data_base, ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'] == 'Average Household size') & (s_df['Studie'] == 'H-1')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Krlsc5QStSGA"
      },
      "source": [
        "#s_df.loc[(s_df['Tabelle'] == 'New Variables') & (s_df['Kategorie 1'] == 'Durchschnittliche Haushaltsgröße') & (s_df['Studie'] == 'HA-2'), \"Bearbeitung\"][209852]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iIyq_ngOITB-"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NrV-rEgZtL7F"
      },
      "source": [
        "###Private households with 3 or more people for different demographical groups (HA-2)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S-uX9LNotMaM"
      },
      "source": [
        "s_df = sample_df.copy()\n",
        "\n",
        "#Calculating number of households with 3 people or more\n",
        "\n",
        "study = \"HA-2\"\n",
        "\n",
        "dem_g = [\"u15 Kinder und Jugendliche in Privathaushalten\", \"u20 Personen in Privathaushalten\", \"20-40 Personen in Privathaushalten\", \"40-60 Personen in Privathaushalten\", \"ü60 Personen in Privathaushalten\"]\n",
        "\n",
        "size = 'Dreipersonenhaushalt|Vierpersonenhaushalt|Haushalt mit fünf und mehr Personen'\n",
        "\n",
        "\n",
        "for g in dem_g: \n",
        "  for d in subdates:\n",
        "\n",
        "    data = s_df[(s_df['Studie'] == study) & (s_df['Kategorie 1'].str.contains(g)) & (s_df['Date'] == d) & (s_df['Kategorie 2'].str.contains(size)) & (s_df['Einheit'] == 'Anzahl')]\n",
        "    data_p3 = s_df[(s_df['Studie'] == study) & (s_df['Kategorie 1'].str.contains(g)) & (s_df['Kategorie 2'] == \"Haushalt mit fünf und mehr Personen \")& (s_df['Date'] == d) & (s_df['value'].notna()) & (s_df['Einheit'] == 'Anzahl')].copy()\n",
        "    \n",
        "    bea_data1 = bea_data(data)\n",
        "    bea_data2 = bea_data(data_p3)\n",
        "    \n",
        "    data_p3.loc[:,'value'] = data.loc[:,'value'].sum()\n",
        "    data_p3.loc[:,'Kategorie 1'] = g + ': Haushalt mit drei und mehr Personen'\n",
        "    data_p3.loc[:,'Kategorie 2'] = 'Haushaltsanzahl'\n",
        "    data_p3.loc[:,'Szenario'] = data_p3.loc[:,'Szenario'] \n",
        "    data_p3.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Summe von Dreipersonen-, Vierpersonen- und Fünf+ Personenhaushalte, ursprüngliche Variablen\" + bea_data1\n",
        "    data_p3.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_p3.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_p3.loc[:,'ID_BVD'] = \"\"\n",
        "    data_p3.loc[:,'ID'] += 150000\n",
        "    data_p3.loc[:,'BVD'] = \"\"\n",
        "    data_p3.loc[:,'BVA'] = \"\"\n",
        "    data_p3.loc[:,'Dokument'] = \"\"\n",
        "    data_p3.loc[:,'BVN'] = \"\"\n",
        "    data_p3.loc[:, 'Einheit'] = 'Anzahl'\n",
        "   \n",
        "    s_df = s_df.append(data_p3, ignore_index=True)\n",
        "    \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == 'HA-2') & (s_df['Kategorie 1'].str.contains('u20 Personen in Privathaushalten')) & (s_df['Kategorie 1'].str.contains('Haushalt mit drei und mehr Personen')) & (s_df['Einheit'] == 'Anzahl')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1TX5KwBmt3Oq"
      },
      "source": [
        "#s_df.loc[:,\"Bearbeitung\"][209529]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tjqcUECx4-14"
      },
      "source": [
        "#Calculating percentage of households with 3 people or more related to total households in Germany\n",
        "\n",
        "for g in dem_g:\n",
        "  for d in subdates:\n",
        "\n",
        "    data_hde = s_df[(s_df['Studie'] == study) & (s_df['Date'] == d) & (s_df['Kategorie 1'] == \"Privathaushalte Germany insgesamt\")].copy()\n",
        "\n",
        "    data_p3 = s_df[(s_df['Studie'] == study) & (s_df['Kategorie 1'].str.contains(g)) & (s_df['Kategorie 1'].str.contains(\"Haushalt mit drei und mehr Personen\")) & (s_df['Date'] == d) & (s_df['value'].notna()) & (s_df['Einheit'] == 'Anzahl')].copy()\n",
        "    \n",
        "    bea_data1 = bea_data(data_hde)\n",
        "    bea_data2 = bea_data(data_p3)\n",
        "\n",
        "    data_hde.loc[:,'value'] = data_p3.loc[:,'value'].max() / data_hde.loc[:,'value'].max() * 100\n",
        "    data_hde.loc[:,'Kategorie 1'] = g + ': Haushalt mit drei und mehr Personen'\n",
        "    data_hde.loc[:,'Kategorie 2'] = 'Anteil an Haushalten in Germany'\n",
        "    data_hde.loc[:,'Bearbeitung'] = \"Eigene Berechnung: Anteil 3P+ Haushalte an Haushalten insgesamt, Berechnung über normierte Variablen\" + bea_data1\n",
        "    data_hde.loc[:,'Tabelle'] = \"New Variables\"\n",
        "    data_hde.loc[:,'Szenario'] = data_hde.loc[:,'Szenario'] \n",
        "    data_hde.loc[:,'Anmerkung'] = \"Eigene Berechnung\"\n",
        "    data_hde.loc[:,'ID_BVD'] = \"\"\n",
        "    data_hde.loc[:,'ID'] += 160000\n",
        "    data_hde.loc[:,'BVD'] = \"\"\n",
        "    data_hde.loc[:,'BVA'] = \"\"\n",
        "    data_hde.loc[:,'Dokument'] = \"\"\n",
        "    data_hde.loc[:,'BVN'] = \"\"\n",
        "    data_hde.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "\n",
        "    s_df = s_df.append(data_hde, ignore_index=True)\n",
        "  \n",
        "s_df[(s_df['Tabelle'] == 'New Variables') & (s_df['Studie'] == 'HA-2') & (s_df['Kategorie 1'].str.contains('20-40 Personen in Privathaushalten')) & (s_df['Kategorie 1'].str.contains('Haushalt mit drei und mehr Personen')) & (s_df['Einheit'] == 'Prozentpunkte')].head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8KWF9w4enunv"
      },
      "source": [
        "#s_df.loc[:,\"Bearbeitung\"][209631]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TPppBgaUeF-2"
      },
      "source": [
        "sample_df = s_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P2VAhrYhqbiS"
      },
      "source": [
        "##Additional calculations BV"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x01O5ZZfjMV7"
      },
      "source": [
        "###Age groups for BV-14 Germany data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LSjA_6gqqfJD",
        "cellView": "code"
      },
      "source": [
        "#@title Population\n",
        "\n",
        "BASE = \"Population Germany by age group\"\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "ranges = [[0,14], [25,54], [15,64], [65,100], [80,100]]\n",
        "\n",
        "\n",
        "categories = [\"Children Population 0-14\", \"Best Working age Population 25-54\", \"Working age Population 15-64\", \"Elderly Population 65 and over\", \"Very Elderly Population 80 and over\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "q = sample_df.loc[(sample_df[\"Kategorie 1\"].str.strip()==BASE)]\n",
        "q[\"Kategorie 2\"] = pd.to_numeric(q[\"Kategorie 2\"], downcast='integer')\n",
        "\n",
        "sums_years = {}\n",
        "\n",
        "\n",
        "                   \n",
        "for variable in variable_list:\n",
        "  c = 0\n",
        "  u = q.loc[q[\"BVD\"]==variable]  \n",
        "  for r in ranges:\n",
        "    cat = \"Germany: \" + categories[c]\n",
        "    for date in subdates:\n",
        "      group = str(r[0])+'-'+str(r[1])\n",
        "      n = variable + \"_\" + group\n",
        "      if n not in sums_years:\n",
        "        sums_years[n] = {}\n",
        "\n",
        "      s = u.loc[(u['Date']==date) & (u[\"Kategorie 2\"]>=r[0]) & (u[\"Kategorie 2\"]<=r[1]), 'value'].sum()\n",
        "      sums_years[n][date] = { 'sum': s, 'group': group , 'var' : variable[-2:], 'cat' : cat, 'id': 777000 + c}\n",
        "\n",
        "    if c > 3:\n",
        "      continue\n",
        "    else:\n",
        "      c = c + 1\n",
        "\n",
        "print(sums_years['P-1_V3_0-14'])\n",
        "#sums_years\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BaDE8Pg7uHrW",
        "cellView": "code"
      },
      "source": [
        "#ADDING DATA\n",
        "\n",
        "n_df = pd.DataFrame(data=None, columns=sample_df.columns, index=None)\n",
        "\n",
        "for i in sums_years:\n",
        "  for year in sums_years[i]:\n",
        "    n = {'Studie': 'P-1', \"Themenfeld Studie\": \"Population\", \"Finale Auswahl\": 'in', \"Themenfeld erfasste Daten\": \"Population\",\"ID\": sums_years[i][year]['id'], \"Tabelle\": \"New Variable\", \"Anmerkung\": \"Eigene Berechnung\", \"Szenario\": sums_years[i][year]['var'], 'Kategorie 1': sums_years[i][year]['cat'], 'Kategorie 2': 'Personenanzahl', 'value': sums_years[i][year]['sum'], 'Date': year, 'Bearbeitung': \"Eigene Berechnung über die variable Bevölkerung nach Alter \", 'Einheit': 'Anzahl'} \n",
        "    n_df = n_df.append(n, ignore_index=True)\n",
        "    #ds.append(d)\n",
        "    \n",
        "n_df[(n_df['Szenario'] == \"V3\")]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ioik8lqk4lae"
      },
      "source": [
        "#CALCULATING PERCENTAGE DATA\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "\n",
        "for v in variable_list:\n",
        "  bev_de = sample_df[(sample_df['Kategorie 1'] == 'Population GE') & (sample_df['BVD'] == v)]\n",
        "  \n",
        "  \n",
        "  \n",
        "  for d in subdates:\n",
        "    \n",
        "    data = n_df[(n_df['Studie'] == 'P-1') & (n_df['Szenario'] == v[-2:]) & (n_df['Date'] == d)]\n",
        "    data.loc[:, 'value'] =  data.loc[:, 'value'] / bev_de.loc[bev_de['Date'].eq(d), 'value'].max() * 100\n",
        "    data.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "    data.loc[:, 'Kategorie 2'] = '% of total Population'\n",
        "    \n",
        "    n_df = n_df.append(data, ignore_index=True)\n",
        "\n",
        "#n_df['Kategorie 1'] \n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OxeBEUyKk4E_"
      },
      "source": [
        "n_df[(n_df['Szenario'] == \"V3\") & (n_df['Einheit'] == 'Prozentpunkte') & (n_df['Kategorie 1'] == 'Germany: Working age Population 15-64')]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uYQqcAWZjdve"
      },
      "source": [
        "###Age groups for BV-14 state data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G11JyKS_oKtE",
        "cellView": "code"
      },
      "source": [
        "#BUNDESLAND-DATEN\n",
        "\n",
        "#@title Population\n",
        "\n",
        "BASE = [\"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "ranges = [[0,14], [25,54], [15,64], [65,100], [80,100]]\n",
        "\n",
        "#categories = [\"Anteil der Kinder (0-14 Jahre) an der Gesamtbevölkerung\", \"Anteil der Bevölkerung im besten Erwerbsalter (25-54)\", \"Anteil der Bevölkerung im Erwerbsalter (15-64)\", \"Alte Menschen - Anteil der Personen, die 65 Jahre und älter sind an der Gesamtbevölkerung\", \"Sehr alte Menschen - Anteil der Personen, die 80 Jahre und älter sind an der Gesamtbevölkerung\"]\n",
        "categories = [\"Children Population 0-14\", \"Best Working age Population 25-54\", \"Working age Population 15-64\", \"Elderly Population 65 and over\", \"Very Elderly Population 80 and over\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "q = sample_df.loc[(sample_df[\"Studie\"] == \"P-1\") & (sample_df[\"Kategorie 1\"].str.contains(\"overall by age\"))]\n",
        "q[\"Kategorie 2\"] = pd.to_numeric(q[\"Kategorie 2\"], downcast='integer')\n",
        "\n",
        "sums_years = {}\n",
        "\n",
        "       \n",
        "for variable in variable_list:\n",
        "  for b in BASE:                                                                 \n",
        "    c = 0\n",
        "    cat2= b + \" Population overall by age group\"\n",
        "    u = q.loc[(q[\"BVD\"]==variable) & (q['Kategorie 1']==cat2)]  \n",
        "\n",
        "    for r in ranges:\n",
        "      cat = b + \": \" + categories[c]\n",
        "      for date in subdates:\n",
        "        group = str(r[0])+'-'+str(r[1])\n",
        "        n = variable + \"_\" + group + \"_\" + b\n",
        "        if n not in sums_years:\n",
        "          sums_years[n] = {}\n",
        "\n",
        "        s = u.loc[(u['Date']==date) & (u[\"Kategorie 2\"]>=r[0]) & (u[\"Kategorie 2\"]<=r[1]), 'value'].sum()\n",
        "        sums_years[n][date] = { 'sum': s, 'group': group , 'var' : variable[-2:], 'cat' : cat, 'id': 888000 + c}\n",
        "\n",
        "      if c > len(BASE):\n",
        "        continue\n",
        "      else:\n",
        "        c = c + 1\n",
        "\n",
        "print(sums_years['P-1_V2_0-14_Thuringia'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6i5fWmefHwft"
      },
      "source": [
        "#ADDING DATA TO DATAFRAME\n",
        "\n",
        "#n_df = pd.DataFrame(data=None, columns=sample_df.columns, index=None) #gleich noch auskommentieren!\n",
        "#print(sums_years)\n",
        "for i in sums_years:\n",
        "  for year in sums_years[i]:\n",
        "    n = {'Studie': 'P-1', \"Themenfeld Studie\": \"Population\", \"Finale Auswahl\": 'in', \"Themenfeld erfasste Daten\": \"Population\",\"ID\": sums_years[i][year]['id'], \"Tabelle\": \"New Variable\", \"Anmerkung\": \"Eigene Berechnung\", \"Szenario\": sums_years[i][year]['var'], 'Kategorie 1': sums_years[i][year]['cat'], 'Kategorie 2': 'Personenanzahl', 'value': sums_years[i][year]['sum'], 'Date': year, 'Bearbeitung': \"Eigene Berechnung über die variable Bevölkerung nach Alter für die einzelnen Bundesländer\", 'Einheit': 'Anzahl'} \n",
        "    n_df = n_df.append(n, ignore_index=True)\n",
        "\n",
        "n_df[n_df['Kategorie 1'].str.contains(\"Working age\")]\n",
        "#n_df['Kategorie 1'] "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFpPzA7bJbtR"
      },
      "source": [
        "#CALCULATING PERCENTAGE DATA\n",
        "\n",
        "n_df_2 = n_df.copy()\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "categories = [\"Children Population 0-14\", \"Best Working age Population 25-54\", \"Working age Population 15-64\", \"Elderly Population 65 and over\", \"Very Elderly Population 80 and over\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "\n",
        "for v in variable_list:\n",
        "  for b in BASE:\n",
        "    bev_bl = sample_df[(sample_df['Kategorie 1'] == \"Population GE by State\") & (sample_df['Kategorie 2'] == b) & (sample_df['BVD'] == v)]\n",
        "   \n",
        "    for ck in categories:\n",
        "     cat3 = b + \": \" + ck\n",
        "  \n",
        "    for d in subdates:\n",
        "   \n",
        "      data = n_df_2[(n_df_2['Kategorie 1'] == cat3) & (n_df_2['Studie'] == 'P-1') & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)]\n",
        "      data.loc[:, 'value'] =  data.loc[:, 'value'] / bev_bl.loc[bev_bl['Date'].eq(d), 'value'].max() * 100\n",
        "      data.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "      data.loc[:, 'Kategorie 2'] = '% of total Population'\n",
        "      \n",
        "\n",
        "      n_df_2 = n_df_2.append(data, ignore_index=True)\n",
        "      \n",
        "n_df_2\n",
        "n_df_2['Kategorie 1']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CD8EyIPCUcti"
      },
      "source": [
        "n_df = n_df_2\n",
        "#n_df['Kategorie 1'] "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tyky_mRXn0Cz"
      },
      "source": [
        "###Percentage of very old to old people"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wikVXFKAYL8A"
      },
      "source": [
        "#@title Population\n",
        "\n",
        "n_df_2 = n_df.copy()\n",
        "\n",
        "BASE = [\"Germany\", \"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "\n",
        "c = [\"Elderly Population 65 and over\", \"Very Elderly Population 80 and over\"]\n",
        "\n",
        "des = [\"Population\", \"Very Elderly Population 80 and over\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "\n",
        "for v in variable_list:\n",
        "  \n",
        "  for b in BASE:\n",
        "  \n",
        "    for d in subdates:\n",
        "      condition = (n_df_2['Kategorie 1'].str.contains(b)) & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)& (n_df_2['Kategorie 2'] == 'Personenanzahl')\n",
        "      #condition = (n_df_2['Kategorie 1'].str.contains(b)) & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)\n",
        "      bev_old = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[0])) & condition]\n",
        "      #bev_old = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[0]))]\n",
        "      bev_vold = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[1])) & condition].copy()\n",
        "      #print(condition)\n",
        "      bev_vold.loc[:,'value'] = bev_vold.loc[:,'value'].max() / bev_old.loc[:,'value'].max() * 100\n",
        "      bev_vold.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "      bev_vold.loc[:, 'Kategorie 1'] = 'Very Elderly Population 80 and over as % of Elderly Population (over 65)'\n",
        "      bev_vold.loc[:, 'Kategorie 2'] = b\n",
        "      bev_vold.loc[:, 'Bearbeitung'] = 'Eigene Berechnung: Very Elderly Population 80 and over as % of Elderly Population (over 65)'\n",
        "      n_df_2 = n_df_2.append(bev_vold, ignore_index=True)\n",
        "\n",
        "n_df_2\n",
        "#condition\n",
        "#bev_old\n",
        "#c[0]\n",
        "#n_df_2['Kategorie 1'].str.contains(b)\n",
        "#n_df_2['Kategorie 1'].str.contains(c[0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oENpHyFDsWRF"
      },
      "source": [
        "n_df = n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cYERU1e5waz2"
      },
      "source": [
        "###Percentage very old to working Population (15-64)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "psyj3HtIwZoT",
        "cellView": "code"
      },
      "source": [
        "#@title Population\n",
        "\n",
        "n_df_2 = n_df.copy()\n",
        "\n",
        "BASE = [\"Germany\", \"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "#print(n_df_2['Szenario'])\n",
        "c = [\"Very Elderly Population 80 and over\", \"Working age Population 15-64\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "\n",
        "for v in variable_list:\n",
        "  \n",
        "  for b in BASE:\n",
        "  \n",
        "    for d in subdates:\n",
        "      condition = (n_df_2['Kategorie 1'].str.contains(b)) & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)& (n_df_2['Kategorie 2'] == 'Personenanzahl')\n",
        "      bev_vold = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[0])) & condition].copy()\n",
        "      \n",
        "      \n",
        "      bev_ewt = n_df_2[n_df_2['Kategorie 1'].str.contains(c[1]) & condition]\n",
        "      bev_vold.loc[:,'value'] = bev_vold.loc[:,'value'].max() / bev_ewt.loc[:,'value'].max() * 100\n",
        "      bev_vold.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "      bev_vold.loc[:, 'Kategorie 1'] = 'Very Elderly Population 80 and over as % of Working age Population 15-64'\n",
        "      bev_vold.loc[:, 'Kategorie 2'] = b\n",
        "      bev_vold.loc[:, 'Bearbeitung'] = 'Eigene Berechnung: Very Elderly Population 80 and over as % of Working age Population 15-64'\n",
        "      n_df_2 = n_df_2.append(bev_vold, ignore_index=True)\n",
        " \n",
        "n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a_mYVXzlwaX2"
      },
      "source": [
        "n_df = n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hqEgSXPNypvi"
      },
      "source": [
        "###Abhängigkeitsquotient"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jcukDsM_waEf",
        "cellView": "code"
      },
      "source": [
        "#@title Population\n",
        "\n",
        "n_df_2 = n_df.copy()\n",
        "\n",
        "BASE = [\"Germany\", \"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "\n",
        "c = [\"Children\", \"Elderly Population 65 and over\", \"Working age Population 15-64\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "\n",
        "for v in variable_list:\n",
        "  \n",
        "  for b in BASE:\n",
        "  \n",
        "    for d in subdates:\n",
        "      condition = (n_df_2['Kategorie 1'].str.contains(b)) & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)& (n_df_2['Kategorie 2'] == 'Personenanzahl')\n",
        "      bev_ch =  n_df_2[(n_df_2['Kategorie 1'].str.contains(c[0])) & condition].copy()\n",
        "      bev_vold = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[1])) & condition].copy()\n",
        "      bev_ewt = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[2])) & condition]\n",
        "        \n",
        "      bev_ch.loc[:,'value'] = ( bev_ch.loc[:,'value'].max() + bev_vold.loc[:,'value'].max() ) / bev_ewt.loc[:,'value'].max() * 100\n",
        "      bev_ch.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "      bev_ch.loc[:, 'Kategorie 1'] = 'Dependency rate: Elderly Population 65 and over and Children (0-14) as % of Working age Population 15-64'\n",
        "      bev_ch.loc[:, 'Kategorie 2'] = b\n",
        "      bev_ch.loc[:, 'Bearbeitung'] = 'Eigene Berechnung: Elderly Population 65 and over and Children (0-14) as % of Working age Population 15-64'\n",
        "      n_df_2 = n_df_2.append(bev_ch, ignore_index=True)\n",
        "      \n",
        "n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CG8L7l960aGo"
      },
      "source": [
        "n_df = n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ByyOsAam0rMr"
      },
      "source": [
        "###Altenquotient\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5sUqs7wv0rtH",
        "cellView": "code"
      },
      "source": [
        "#@title Population\n",
        "\n",
        "n_df_2 = n_df.copy()\n",
        "\n",
        "BASE = [\"Germany\", \"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Brandenburg\", \"Bremen\", \"Hamburg\", \"Hesse\", \"Mecklenburg-Vorpommern\", \"Lower Saxony\", \"North Rhine-Westphalia\", \"Rhineland-Palatinate\", \"Saarland\", \"Saxony\", \"Saxony-Anhalt\", \"Schleswig-Holstein\", \"Thuringia\"]\n",
        "\n",
        "variable_list = ['P-1_V2', 'P-1_V3']\n",
        "\n",
        "c = [\"Elderly Population 65 and over\", \"Working age Population 15-64\"]\n",
        "\n",
        "subdates = dates[dates.index(\"2019\"):dates.index(\"2041\")]\n",
        "\n",
        "\n",
        "for v in variable_list:\n",
        "  \n",
        "  for b in BASE:\n",
        "  \n",
        "    for d in subdates:\n",
        "      condition = (n_df_2['Kategorie 1'].str.contains(b)) & (n_df_2['Szenario'] == v[-2:]) & (n_df_2['Date'] == d)& (n_df_2['Kategorie 2'] == 'Personenanzahl')\n",
        "      bev_old =  n_df_2[(n_df_2['Kategorie 1'].str.contains(c[0])) & condition].copy()\n",
        "      bev_ewt = n_df_2[(n_df_2['Kategorie 1'].str.contains(c[1])) & condition]\n",
        "      \n",
        "      \n",
        "      bev_old.loc[:,'value'] = bev_old.loc[:,'value'].max() / bev_ewt.loc[:,'value'].max() * 100\n",
        "      bev_old.loc[:, 'Einheit'] = 'Prozentpunkte'\n",
        "      bev_old.loc[:, 'Kategorie 1'] = 'Old-age dependency rate: Elderly Population 65 and over as % of Working age Population 15-64'\n",
        "      bev_old.loc[:, 'Kategorie 2'] = b\n",
        "      bev_old.loc[:, 'Bearbeitung'] = 'Eigene Berechnung: Elderly Population 65 and over as % of Working age Population 15-64'\n",
        "      n_df_2 = n_df_2.append(bev_old, ignore_index=True)\n",
        "      \n",
        "n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jy5L_uPp0sId"
      },
      "source": [
        "n_df = n_df_2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5o2oGJni44N"
      },
      "source": [
        "s = sample_df.copy()\n",
        "\n",
        "s = s.append(n_df)\n",
        "\n",
        "s[(s['Studie'] == 'P-1') & (s['Kategorie 1'].str.contains('Old-age dependency rate'))]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ihw2fIy-jATJ"
      },
      "source": [
        "sample_df = s"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "stHSMFJQ-7I4"
      },
      "source": [
        "##7 Data Export"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ee9FC0uLnNB0"
      },
      "source": [
        "### Export directly to Excel"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RbO4dqQOsbvS"
      },
      "source": [
        "#Creating file\n",
        "\n",
        "#@title Saving file\n",
        "from datetime import datetime\n",
        "from google.colab import files\n",
        "\n",
        "\n",
        "now = datetime.now()\n",
        "today_str = now.strftime(\"%Y%m%d\")\n",
        "\n",
        "batch_size = 320000\n",
        "start = 0\n",
        "end = batch_size\n",
        "size = len(sample_df.index)\n",
        "  \n",
        "for i in range(0,(size//batch_size)+1):\n",
        "  #filename = f\"Datensatz_normiert_EXPORT_{today_str}_{i}.xlsx\"\n",
        "  filename = f\"{today_str}_Datensatz_normiert_EXPORT_{var}_{i}.xlsx\"\n",
        "  print(f\"Saving {filename}\")\n",
        "  \n",
        "  df_to_save = sample_df.iloc[start:end]\n",
        "  df_to_save.to_excel(filename)\n",
        "  start = end\n",
        "  end = end + batch_size\n",
        "\n",
        "  print(f\"{filename} saved\")\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLtR6kWHs0YZ"
      },
      "source": [
        "#export file\n",
        "for i in range(0,(size//batch_size)+1):\n",
        "  filename = f\"{today_str}_Datensatz_normiert_EXPORT_{var}_{i}.xlsx\"\n",
        "  print(f\"Downloading {filename}\")\n",
        "  files.download(filename)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZSeUspciSpdQ"
      },
      "source": [
        "###Download BVA-data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ikzkI57yjGDN"
      },
      "source": [
        "#Possibility to download the dataframe with all the Population data that was used as a basis for the standardization process. \n",
        "#The dataframe includes the IDs used in the process. \n",
        "\n",
        "#save xlsx to local drive\n",
        "#CODE TO USE IN NEXT LINE\n",
        "#save_df_to_xlsx_file('df_bva.xlsx', df_bva)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e0ttTrXBjPAs"
      },
      "source": [
        "#download df_bva\n",
        "#CODE TO USE IN NEXT LINE \n",
        "#files.download('df_bva.xlsx')"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}